[{"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/index.js":"1","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/App.js":"2","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/verifyLink.js":"3","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signin.js":"4","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signup.js":"5","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/main.js":"6","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Dashboard.js":"7","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/listItems.js":"8","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/profile.js":"9","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Stats.js":"10","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/calender.js":"11","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/ProfileDetails.js":"12","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/TasksTable.js":"13","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/OverallStats.js":"14","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/piChart.js":"15","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/stackChart.js":"16","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/meanHoursChart.js":"17","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/HeadTable.js":"18","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/FormAddTask.js":"19","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/FormDialog.js":"20","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/DeleteConfirmation.js":"21","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/ShareConfirmation.js":"22","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/NotificationsConfirmation.js":"23"},{"size":230,"mtime":1611855188217,"results":"24","hashOfConfig":"25"},{"size":602,"mtime":1612171877221,"results":"26","hashOfConfig":"25"},{"size":801,"mtime":1612171877228,"results":"27","hashOfConfig":"25"},{"size":6098,"mtime":1612209999670,"results":"28","hashOfConfig":"25"},{"size":5117,"mtime":1612197668765,"results":"29","hashOfConfig":"25"},{"size":8401,"mtime":1614009673278,"results":"30","hashOfConfig":"25"},{"size":3457,"mtime":1614009673274,"results":"31","hashOfConfig":"25"},{"size":1651,"mtime":1613986752437,"results":"32","hashOfConfig":"25"},{"size":1498,"mtime":1612965535585,"results":"33","hashOfConfig":"25"},{"size":4026,"mtime":1613046259792,"results":"34","hashOfConfig":"25"},{"size":2732,"mtime":1612965535582,"results":"35","hashOfConfig":"25"},{"size":1792,"mtime":1612209999671,"results":"36","hashOfConfig":"25"},{"size":13199,"mtime":1614009673268,"results":"37","hashOfConfig":"25"},{"size":2020,"mtime":1613046259791,"results":"38","hashOfConfig":"25"},{"size":1111,"mtime":1613046259793,"results":"39","hashOfConfig":"25"},{"size":1826,"mtime":1613046259793,"results":"40","hashOfConfig":"25"},{"size":1515,"mtime":1613046259792,"results":"41","hashOfConfig":"25"},{"size":4598,"mtime":1614009834400,"results":"42","hashOfConfig":"25"},{"size":6247,"mtime":1613056906358,"results":"43","hashOfConfig":"25"},{"size":7733,"mtime":1613982022198,"results":"44","hashOfConfig":"25"},{"size":2574,"mtime":1613995650130,"results":"45","hashOfConfig":"25"},{"size":2871,"mtime":1613995798765,"results":"46","hashOfConfig":"25"},{"size":2848,"mtime":1614009924051,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"ag6pq",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/index.js",[],["105","106"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/App.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/verifyLink.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signin.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signup.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/main.js",["107","108","109","110","111","112","113"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Dashboard.js",["114"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Calender from './calender';\n// import OverallStats from './OverallStats';\nimport TaskTable from './TableOfTasks/TasksTable'\n// import { useHistory } from \"react-router-dom\";\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\nconst Dashboard = ({renderFlag}) => {\n\n    // let history = useHistory();\n    const user = JSON.parse(localStorage.getItem(\"storageUser\"));\n    // const [tasks, setTasks] = useState([]);\n\n    const classes = useStyles();\n\n    return (\n        <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <TaskTable tmpUser={user} renderFlag={renderFlag}/>\n                    </Paper>\n                </Grid>\n                <Grid item >\n                    <Paper >\n                        <Calender tmpUser={user} />\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n    </main>\n    );\n};\nexport default Dashboard;\n\n\n\n\n","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/listItems.js",["115","116"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/profile.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Stats.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/calender.js",["117","118","119","120"],"import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { ViewState } from '@devexpress/dx-react-scheduler';\nimport {\n    Scheduler,\n    WeekView,\n    Appointments,\n    Toolbar,\n    ViewSwitcher,\n    MonthView,\n    DayView,\n    TodayButton,\n    DateNavigator,\n} from '@devexpress/dx-react-scheduler-material-ui';\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\n\nconst Calender = ({ tmpUser }) => {\n    const [data, setData] = useState([]);\n    const [currentViewName, setCurrentViewName] = useState('work-week');\n    const [tasks, setTasks] = useState([]);\n\n    const getAllTasks = () => {\n        return (\n            axios.post(`http://localhost:5500/api/tasks/`, {\n                email: tmpUser.email,\n            }).then((response => {\n                response.data.map((item) => {\n                    data.push(item);\n                })\n                if (data) {\n                    data.map(item => {\n                        let tmpTask = {\n                            title: item.taskName,\n                            startDate: Date.parse(item.startTime),\n                            endDate: Date.parse(item.endTime)\n                        }\n                        tasks.push(tmpTask);\n                        setTasks([...tasks]);\n                    })\n                } else {\n                    console.log(data);\n                }\n                tasks.map(item => {\n                    console.log(item);\n                })\n            })))\n    }\n\n    useEffect(() => {\n        if (data.length === 0) {\n            getAllTasks();\n            setData([...data]);\n            setTasks([...tasks]);\n        }\n    }, []);\n\n    const currentViewNameChange = (currentViewName) => {\n        setCurrentViewName(currentViewName);\n    }\n\n    return (\n        <Paper>\n            <Scheduler\n                data={tasks}\n                height={\"100%\"}\n            >\n                <ViewState\n                    defaultCurrentDate={Date.now()}\n                    currentViewName={currentViewName}\n                    onCurrentViewNameChange={currentViewNameChange}\n                />\n                <Toolbar />\n                <DateNavigator />\n                <TodayButton />\n                <WeekView\n                    name=\"work-week\"\n                    displayName=\"Week\"\n                    startDayHour={6}\n                    endDayHour={24}\n                    cellDuration={60}\n                />\n                <MonthView />\n                <DayView\n                    cellDuration={60}\n                />\n\n                <ViewSwitcher />\n                <Appointments />\n            </Scheduler>\n        </Paper>\n    );\n\n}\n\n\nexport default Calender;\n","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/ProfileDetails.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/TasksTable.js",["121"],"import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\n// import clsx from 'clsx';\nimport { makeStyles,fade } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport EnhancedTableToolbar from './HeadTable';\n// import FormDialog from \"./FormDialog\";\n\nimport axios from \"axios\";\nimport {Box} from \"@material-ui/core\";\n\nfunction createData(name, status, category, start, duration, id) {\n    return { name, status, category, start, duration, id };\n}\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\nconst headCells = [\n    { id: 'name', numeric: false, disablePadding: true, label: 'Task Name' },\n    { id: 'status', numeric: true, disablePadding: false, label: 'Status' },\n    { id: 'category', numeric: true, disablePadding: false, label: 'Category' },\n    { id: 'start', numeric: true, disablePadding: false, label: 'Start' },\n    { id: 'duration', numeric: true, disablePadding: false, label: 'Duration' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n    }\n}));\n\nexport default function TaskTable({tmpUser}) {\n\n    const [tasks, setTasks] = useState([])\n    const [refreshSwitch , setRefreshSwitch] = useState(1)\n    const [rows, setTmpRows] = useState([])\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('category');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const getAllTasks = () => {\n        return(\n            axios.post(`http://localhost:5500/api/tasks/`, {\n                email: tmpUser.email,\n            }).then((response => {\n                setTasks(response.data)\n            })))\n    }\n    const getTasksSearch = (serchWord) => {\n        return(\n            axios.post(`http://localhost:5500/api/tasks/search/`, {\n                email: tmpUser.email,\n                searchBy:serchWord,\n            }).then((response => {\n                setTasks(response.data)\n            })))\n    }\n\n    function createRows(){\n        if (tasks.length>0 && rows.length<1) {\n            let tmpArr = []\n            tasks.map(task => (\n                tmpArr.push(createData(task.taskName, task.status, task.category,task.startTime, task.durationMin,task._id))\n            ))\n            setTmpRows([...tmpArr])\n            console.log(\"tmp\", rows)\n        }\n    }\n\n    useEffect(() => {\n        if (tasks.length===0){\n            console.log(tasks.length)\n            getAllTasks();\n        }\n        },[refreshSwitch]);\n\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleRefresh = () => {\n        console.log(\"regeffewfe\")\n        setSelected([])\n        setTasks([])\n        setTmpRows([])\n        setRefreshSwitch(!refreshSwitch)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    function searchTasks(searchWord){\n        let tmpArr = []\n        if(searchWord.length>1) {\n            getTasksSearch(searchWord).then(\n                tasks.map(task => (\n                    tmpArr.push(createData(task.taskName, task.status, task.category, task.startTime, task.durationMin, task._id))\n                )),\n                setTmpRows([...tmpArr]));\n        }\n        else {\n            getAllTasks().then(\n                tasks.map(task => (\n                    tmpArr.push(createData(task.taskName, task.status, task.category, task.startTime, task.durationMin, task._id))\n                )),\n                setTmpRows([...tmpArr]));\n        }\n    }\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar selected={selected}  numSelected={selected.length} search={searchTasks} email={tmpUser.email} refresh={handleRefresh} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        {rows.length>0?<TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.id);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) => handleClick(event, row.id)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.id}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    value={row.id}\n                                                    checked={isItemSelected}\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                />\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                {row.name}\n                                            </TableCell>\n                                            <TableCell align=\"left\">{row.status}</TableCell>\n                                            <TableCell align=\"left\">{row.category}</TableCell>\n                                            <TableCell align=\"left\">{row.start}</TableCell>\n                                            <TableCell align=\"left\">{row.duration}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (53) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>:createRows()}\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/OverallStats.js",["122"],"import React from 'react';\n// import Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport axios from \"axios\";\n// import { useHistory } from \"react-router-dom\";\nimport {useEffect, useState} from 'react';\n\n// function preventDefault(event) {\n//     event.preventDefault();\n// }\nconst useStyles = makeStyles({\n    fragment: {\n        display: \"flex\",\n        justifyContent: \"center\", \n        flexDirection: \"column\",\n        alignItems: \"center\", \n        margin: \"auto\"\n    },\n    depositContext: {\n        flex: 1,\n    },\n});\n\nexport default function OverallStats({tmpUser, category}) {\n\n    const classes = useStyles();\n    const user = (tmpUser);\n    // const [allTasks , setAllTasks ] = useState([]);\n    const [categoryLength , setCategoryLength ] = useState([]);\n    const [completedNumber , setCompletedNumber ] = useState(null);\n\n    const tasksByCategory = () => {\n        let call=`http://localhost:5500/api/tasks/?category=${category}`\n        if (category===\"All\")\n            call=\"http://localhost:5500/api/tasks/\"\n        return(\n        axios.post(`${call}`, {\n            email: user.email,\n        }).then((response => {\n            // setAllTasks(response.data)\n            setCategoryLength(response.data.length)\n            setCompletedNumber(response.data.filter(task => task.status===\"Done\").length)\n        })))\n    }\n    useEffect(() => {\n        tasksByCategory();\n    }, []);\n\n    return (\n        <React.Fragment >\n            <div className={classes.fragment}>\n            <Typography component=\"p\" variant=\"h4\">\n                {category}\n            </Typography>\n            <Typography variant=\"h5\">{completedNumber?completedNumber:\"0\"}/{categoryLength?categoryLength:\"0\"}</Typography>\n            <Typography variant=\"h6\" color=\"textSecondary\" className={classes.depositContext}>\n                Completed\n            </Typography >\n            </div>\n        </React.Fragment>\n    );\n}","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/piChart.js",["123","124"],"import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  Chart,\n  PieSeries,\n  Title,\n  Legend,\n  Tooltip,\n\n\n} from '@devexpress/dx-react-chart-material-ui';\nimport { EventTracker , Animation} from '@devexpress/dx-react-chart';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst PieChart = ({ tmpUser }) => {\n  const [data, setData] = useState([]);\n\n  function getStats() {\n    axios.post('http://localhost:5500/api/tasks/stats', {\n      email: tmpUser.email,\n    }).then((response => {\n      setData(response.data);\n      response.data.map(item => {\n        console.log(item);\n      })\n    }))\n  }\n\n  useEffect(() => {\n    getStats();\n  }, []);\n\n  return (\n    <Paper>\n      <Chart\n        data={data ? data : []}\n      >\n        <PieSeries\n          valueField=\"all\"\n          argumentField=\"name\"\n        />\n\n        <Title\n          text=\"Tasks by category\"\n\n        />\n        <Legend position=\"bottom\"/>\n        <EventTracker/>\n        <Tooltip />\n        <Animation duration={3000}/>\n      </Chart>\n    </Paper>\n  );\n}\n\n\nexport default PieChart;","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/stackChart.js",["125","126"],"import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    Chart,\n    Title,\n    Legend,\n    Tooltip,\n    ArgumentAxis,\n    ValueAxis,\n    BarSeries,\n\n} from '@devexpress/dx-react-chart-material-ui';\nimport { Stack } from '@devexpress/dx-react-chart';\nimport { EventTracker , Animation} from '@devexpress/dx-react-chart';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst StackChart = ({ tmpUser }) => {\n    const [data, setData] = useState([]);\n\n    function getStats() {\n        axios.post('http://localhost:5500/api/tasks/stats', {\n            email: tmpUser.email,\n        }).then((response => {\n            setData(response.data);\n            response.data.map(item => {\n                console.log(item);\n            })\n        }))\n    }\n\n    useEffect(() => {\n        getStats();\n    }, []);\n\n    return (\n        <Paper>\n            <Chart\n                data={data ? data : []}\n            >\n                <Title\n                    text=\"Tasks status\"\n\n                />\n                <ArgumentAxis />\n                <ValueAxis />\n\n                <BarSeries\n                    valueField=\"done\"\n                    argumentField=\"name\"\n                    name=\"Done\"\n                />\n                <BarSeries\n                    valueField=\"In progress\"\n                    argumentField=\"name\"\n                    name=\"In progress\"\n                />\n                <BarSeries\n                    valueField=\"New\"\n                    argumentField=\"name\"\n                    name=\"New\"\n                />\n                <Stack />\n                <Legend />\n                <EventTracker />\n                <Tooltip />\n                <Animation duration={3000}/>\n            </Chart>\n        </Paper>\n    );\n}\n\n\nexport default StackChart;","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/meanHoursChart.js",["127","128"],"import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    Chart,\n    Title,\n    Legend,\n    Tooltip,\n    ArgumentAxis,\n    ValueAxis,\n    BarSeries,\n\n} from '@devexpress/dx-react-chart-material-ui';\nimport { Stack } from '@devexpress/dx-react-chart';\nimport { EventTracker ,Animation} from '@devexpress/dx-react-chart';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst MeanHoursChart = ({ tmpUser }) => {\n    const [data, setData] = useState([]);\n\n    function getStats() {\n        axios.post('http://localhost:5500/api/tasks/stats', {\n            email: tmpUser.email,\n        }).then((response => {\n            setData(response.data);\n            response.data.map(item => {\n                console.log(item);\n            })\n        }))\n    }\n\n    useEffect(() => {\n        getStats();\n    }, []);\n\n    return (\n        <Paper>\n            <Chart\n                data={data ? data : []}\n            >\n                <Title\n                    text=\"Duration By Category\"\n\n                />\n                <ArgumentAxis />\n                <ValueAxis />\n\n                <BarSeries\n                    valueField=\"mean\"\n                    argumentField=\"name\"\n                    name=\"Done\"\n                />\n                <Stack />\n                <Legend />\n                <EventTracker />\n                <Tooltip />\n                <Animation duration={3000}/>\n            </Chart>\n        </Paper>\n    );\n}\n\n\nexport default MeanHoursChart;","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/HeadTable.js",["129"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/FormAddTask.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/FormDialog.js",["130"],"import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport axios from 'axios';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(({\n\n    dialogForm: {\n        display: \"flex\" , \n        flexDirection: \"column\" ,\n    }\n}));\n\nexport default function FormDialog({ task, numSelected }) {\n    const [currentTask, setCurrentTask] = useState({});\n    const [open, setOpen] = React.useState(false);\n    const classes = useStyles();\n\n    const handleClickOpen = () => {\n        if (numSelected>1){\n            alert(\"Can't edit more than 1 task.\")\n\n        }\n        else if(numSelected==0){\n            alert(\"Choose a task to edit.\")\n        }\n        else {\n            loadTask(task)\n            setOpen(true);\n        }\n    };\n\n    const handleClose = () => {\n        console.log(currentTask);\n        console.log(task);\n        setOpen(false);\n    };\n    const handleUpdate = () => {\n        console.log(currentTask);\n        console.log(\"taks\",task);\n        console.log(\"taskName\",currentTask.taskName);\n        console.log(\"duration\",currentTask.durationMin);\n        console.log(\"startTime\",currentTask.startTime);\n        console.log(\"description\",currentTask.description);\n        console.log(\"status\",currentTask.status);\n        console.log(\"category\",currentTask.category);\n        axios.put(`http://localhost:5500/api/tasks`, {\n            _id: task,\n            taskName: currentTask.taskName,\n            durationMin: currentTask.durationMin,\n            startTime: currentTask.startTime,\n            description: currentTask.description,\n            status: currentTask.status,\n            category: currentTask.category\n        }).then((response => {\n            if (response.data.message === 'succesful') {\n                console.log('update succesful');\n            } else {\n                console.log('update failed');\n            }\n            handleClose();\n        }))\n\n    };\n\n    const loadTask = (task) => {\n        axios.get(`http://localhost:5500/api/tasks/view/${task}`).then((response => {\n            if (response.data) {\n                setCurrentTask(response.data)\n                console.log(\"Task loaded!!\",response.data);\n            } else {\n                console.log('failed to load task');\n            }\n        }))\n\n    };\n\n    return (\n        <div>\n            <IconButton variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n                <EditIcon />\n            </IconButton>\n            <Dialog fullWidth={\"fullWidth\"} maxWidth={\"sm\"} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Update Task</DialogTitle>\n                <DialogContent className={classes.dialogForm} >\n                    <DialogContentText>\n                        Please fill all fields\n                    </DialogContentText>\n                    <TextField\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        required\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"taskName\"\n                        label=\"Task Name\"\n                        type=\"text\"\n                        value={currentTask.taskName}\n                        onChange={event => { setCurrentTask({...currentTask, taskName:event.target.value })}}\n                    />\n                    <TextField\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        required\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"duration\"\n                        label=\"Duration\"\n                        type=\"number\"\n                        value={currentTask.durationMin}\n                        onChange={event => { setCurrentTask({...currentTask, durationMin:event.target.value })}}\n\n                    />\n                    <TextField\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        required\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"startTime\"\n                        label=\"Start date and time\"\n                        type=\"datetime-local\"\n                        defaultValue=\"2021-02-23T17:00\"\n                        value={currentTask.startTime}\n                        onChange={event => { setCurrentTask({...currentTask, startTime:event.target.value })}}\n\n                    />\n                    <TextField\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        required\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"description\"\n                        label=\"Description\"\n                        type=\"text\"\n                        value={currentTask.description}\n                        onChange={event => { setCurrentTask({...currentTask, description:event.target.value })}}\n\n                    />\n                    <InputLabel shrink id=\"statusSelectLabel\">\n                        Status\n                    </InputLabel>\n                    <Select\n                        labelId=\"statusSelectLabel\"\n                        id=\"statusSelect\"\n                        value={currentTask.status}\n                        onChange={event => { setCurrentTask({...currentTask, status:event.target.value })}}\n                    >\n                        <MenuItem value={'In progress'}>In progress</MenuItem>\n                        <MenuItem value={'New'}>New</MenuItem>\n                        <MenuItem value={'Done'}>Done</MenuItem>\n                    </Select>\n                    <InputLabel shrink id=\"categorySelectLabel\">\n                        Category\n                    </InputLabel >\n                    <Select\n                        labelId=\"categorySelectLabel\"\n                        id=\"categorySelect\"\n                        value={currentTask.category}\n                        onChange={event => { setCurrentTask({...currentTask, category:event.target.value })}}\n                    >\n                        <MenuItem value={'Education'}>Education</MenuItem>\n                        <MenuItem value={'Training'}>Training</MenuItem>\n                        <MenuItem value={'Meeting'}>Meeting</MenuItem>\n                        <MenuItem value={'Home'}>Home</MenuItem>\n                        <MenuItem value={'General'}>General</MenuItem>\n                    </Select>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleUpdate} color=\"primary\">\n                        Update\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/DeleteConfirmation.js",["131","132","133","134"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Box} from \"@material-ui/core\";\nimport axios from \"axios\";\n\n\nexport default function DeleteConfirmation({task, refresh}) {\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    function handleCloseDelete (){\n        task.map(task => {\n            axios.delete(`http://localhost:5500/api/tasks/${task}`).then((response => {\n                if (response.data.deletedCount!=0) {\n                    console.log(\"Task deleted!!\");\n                    refresh();\n                } else {\n                    console.log('Failed to delete task');\n                }\n            }))\n        })\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <Tooltip title=\"Delete\">\n                <IconButton aria-label=\"delete\" onClick={handleClickOpen}>\n\n                    <DeleteIcon color={\"primary\"} />\n                </IconButton>\n            </Tooltip>\n            <Dialog\n                fullWidth={true}\n                maxWidth={'sm'}\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\" Are you sure you want to delete these tasks ?\"}</DialogTitle>\n                <DialogContent>\n                    {/*<DialogContentText id=\"alert-dialog-description\">*/}\n                    {/*    Are you sure you want to delete these tasks?*/}\n                    {/*</DialogContentText>*/}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={handleCloseDelete} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/ShareConfirmation.js",["135"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport axios from \"axios\";\nimport TextField from \"@material-ui/core/TextField\";\n\n\nexport default function ShareConfirmation({task}) {\n\n    const [open, setOpen] = React.useState(false);\n    const [email, setEmail] = React.useState(\"\");\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleCloseShare = () => {\n        task.map(task => {\n            axios.post(`http://localhost:5500/api/tasks/share-task`, {\n                _id:task,\n                targetUserEmail: email,\n            })\n        })\n        setOpen(false);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <Tooltip title=\"Delete\">\n                <IconButton aria-label=\"delete\" onClick={handleClickOpen}>\n                    <ShareIcon color={\"primary\"} />\n                </IconButton>\n            </Tooltip>\n            <Dialog\n                fullWidth={true}\n                maxWidth={'sm'}\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle  id=\"alert-dialog-title\">{\"Share Task\"} </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Share with:\n                    </DialogContentText>\n                    <TextField\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        required\n                        autoFocus\n                        placeholder=\"placeholder@gmail.com\"\n                        margin=\"dense\"\n                        id=\"taskName\"\n                        label=\"Email\"\n                        type=\"text\"\n                        onChange={event => { setEmail(event.target.value )}}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={handleCloseShare} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/NotificationsConfirmation.js",["136","137","138","139","140"],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":7,"column":8,"nodeType":"147","messageId":"148","endLine":7,"endColumn":16},{"ruleId":"145","severity":1,"message":"149","line":26,"column":8,"nodeType":"147","messageId":"148","endLine":26,"endColumn":19},{"ruleId":"145","severity":1,"message":"150","line":27,"column":8,"nodeType":"147","messageId":"148","endLine":27,"endColumn":21},{"ruleId":"145","severity":1,"message":"151","line":28,"column":8,"nodeType":"147","messageId":"148","endLine":28,"endColumn":21},{"ruleId":"145","severity":1,"message":"152","line":29,"column":8,"nodeType":"147","messageId":"148","endLine":29,"endColumn":14},{"ruleId":"145","severity":1,"message":"153","line":30,"column":8,"nodeType":"147","messageId":"148","endLine":30,"endColumn":14},{"ruleId":"154","severity":1,"message":"155","line":152,"column":8,"nodeType":"156","endLine":152,"endColumn":10,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":92,"column":33,"nodeType":"147","messageId":"160","endLine":92,"endColumn":43},{"ruleId":"145","severity":1,"message":"161","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":21},{"ruleId":"145","severity":1,"message":"162","line":9,"column":8,"nodeType":"147","messageId":"148","endLine":9,"endColumn":22},{"ruleId":"163","severity":1,"message":"164","line":28,"column":42,"nodeType":"165","messageId":"166","endLine":28,"endColumn":44},{"ruleId":"163","severity":1,"message":"164","line":32,"column":35,"nodeType":"165","messageId":"166","endLine":32,"endColumn":37},{"ruleId":"163","severity":1,"message":"164","line":44,"column":32,"nodeType":"165","messageId":"166","endLine":44,"endColumn":34},{"ruleId":"154","severity":1,"message":"167","line":56,"column":8,"nodeType":"156","endLine":56,"endColumn":10,"suggestions":"168"},{"ruleId":"154","severity":1,"message":"169","line":198,"column":11,"nodeType":"156","endLine":198,"endColumn":26,"suggestions":"170"},{"ruleId":"154","severity":1,"message":"171","line":48,"column":8,"nodeType":"156","endLine":48,"endColumn":10,"suggestions":"172"},{"ruleId":"163","severity":1,"message":"164","line":24,"column":30,"nodeType":"165","messageId":"166","endLine":24,"endColumn":32},{"ruleId":"154","severity":1,"message":"173","line":32,"column":6,"nodeType":"156","endLine":32,"endColumn":8,"suggestions":"174"},{"ruleId":"163","severity":1,"message":"164","line":26,"column":36,"nodeType":"165","messageId":"166","endLine":26,"endColumn":38},{"ruleId":"154","severity":1,"message":"173","line":34,"column":8,"nodeType":"156","endLine":34,"endColumn":10,"suggestions":"175"},{"ruleId":"163","severity":1,"message":"164","line":26,"column":36,"nodeType":"165","messageId":"166","endLine":26,"endColumn":38},{"ruleId":"154","severity":1,"message":"173","line":34,"column":8,"nodeType":"156","endLine":34,"endColumn":10,"suggestions":"176"},{"ruleId":"145","severity":1,"message":"177","line":16,"column":8,"nodeType":"147","messageId":"148","endLine":16,"endColumn":31},{"ruleId":"178","severity":1,"message":"179","line":35,"column":28,"nodeType":"180","messageId":"181","endLine":35,"endColumn":30},{"ruleId":"145","severity":1,"message":"182","line":6,"column":8,"nodeType":"147","messageId":"148","endLine":6,"endColumn":25},{"ruleId":"145","severity":1,"message":"183","line":11,"column":9,"nodeType":"147","messageId":"148","endLine":11,"endColumn":12},{"ruleId":"163","severity":1,"message":"164","line":29,"column":23,"nodeType":"165","messageId":"166","endLine":29,"endColumn":25},{"ruleId":"178","severity":1,"message":"184","line":31,"column":47,"nodeType":"180","messageId":"181","endLine":31,"endColumn":49},{"ruleId":"163","severity":1,"message":"164","line":25,"column":23,"nodeType":"165","messageId":"166","endLine":25,"endColumn":25},{"ruleId":"145","severity":1,"message":"185","line":1,"column":16,"nodeType":"147","messageId":"148","endLine":1,"endColumn":24},{"ruleId":"145","severity":1,"message":"182","line":6,"column":8,"nodeType":"147","messageId":"148","endLine":6,"endColumn":25},{"ruleId":"145","severity":1,"message":"186","line":8,"column":8,"nodeType":"147","messageId":"148","endLine":8,"endColumn":18},{"ruleId":"145","severity":1,"message":"187","line":9,"column":8,"nodeType":"147","messageId":"148","endLine":9,"endColumn":15},{"ruleId":"145","severity":1,"message":"183","line":11,"column":9,"nodeType":"147","messageId":"148","endLine":11,"endColumn":12},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'MailIcon' is defined but never used.","Identifier","unusedVar","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getSharedTasks', 'history', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["190"],"no-use-before-define","'renderFlag' was used before it was defined.","usedBeforeDefined","'ListSubheader' is defined but never used.","'AssignmentIcon' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'data', 'getAllTasks', and 'tasks'. Either include them or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["191"],"React Hook useEffect has missing dependencies: 'getAllTasks' and 'tasks.length'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'tasksByCategory'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.",["194"],["195"],["196"],"'PlaylistAddOutlinedIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'DialogContentText' is defined but never used.","'Box' is defined but never used.","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'DeleteIcon' is defined but never used.","'Tooltip' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"205","fix":"207"},{"desc":"205","fix":"208"},"Update the dependencies array to be: [getSharedTasks, history, user]",{"range":"209","text":"210"},"Update the dependencies array to be: [data, getAllTasks, tasks]",{"range":"211","text":"212"},"Update the dependencies array to be: [getAllTasks, refreshSwitch, tasks.length]",{"range":"213","text":"214"},"Update the dependencies array to be: [tasksByCategory]",{"range":"215","text":"216"},"Update the dependencies array to be: [getStats]",{"range":"217","text":"218"},{"range":"219","text":"218"},{"range":"220","text":"218"},[4913,4915],"[getSharedTasks, history, user]",[1686,1688],"[data, getAllTasks, tasks]",[6803,6818],"[getAllTasks, refreshSwitch, tasks.length]",[1498,1500],"[tasksByCategory]",[700,702],"[getStats]",[854,856],[857,859]]