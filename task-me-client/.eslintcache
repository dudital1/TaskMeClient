[{"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\index.js":"1","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\App.js":"2","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\verifyLink.js":"3","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signup.js":"4","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signin.js":"5","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\main.js":"6","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\listItems.js":"7","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Dashboard.js":"8","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Chart.js":"9","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\OverallStats.js":"10","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TasksTable.js":"11","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Title.js":"12","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\profile.js":"13","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\ProfileDetails.js":"14"},{"size":241,"mtime":1612126866112,"results":"15","hashOfConfig":"16"},{"size":624,"mtime":1612162685890,"results":"17","hashOfConfig":"16"},{"size":827,"mtime":1612162853982,"results":"18","hashOfConfig":"16"},{"size":5268,"mtime":1612199318918,"results":"19","hashOfConfig":"16"},{"size":6276,"mtime":1612208990191,"results":"20","hashOfConfig":"16"},{"size":7830,"mtime":1612213030023,"results":"21","hashOfConfig":"16"},{"size":2420,"mtime":1612212957212,"results":"22","hashOfConfig":"16"},{"size":5288,"mtime":1612199318919,"results":"23","hashOfConfig":"16"},{"size":1767,"mtime":1612126866107,"results":"24","hashOfConfig":"16"},{"size":1909,"mtime":1612209460880,"results":"25","hashOfConfig":"16"},{"size":13797,"mtime":1612199318922,"results":"26","hashOfConfig":"16"},{"size":376,"mtime":1612126866109,"results":"27","hashOfConfig":"16"},{"size":1512,"mtime":1612203857920,"results":"28","hashOfConfig":"16"},{"size":1848,"mtime":1612206704819,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1byuelv",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\index.js",[],["61","62"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\App.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\verifyLink.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signup.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signin.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\main.js",["63","64","65","66","67","68"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\listItems.js",["69","70"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Dashboard.js",["71","72","73"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport Chart from './Chart';\r\nimport OverallStats from './OverallStats';\r\nimport TaskTable from './TasksTable'\r\n// import { useHistory } from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\nconst Dashboard = () => {\r\n\r\n    // let history = useHistory();\r\n    const user = JSON.parse(localStorage.getItem(\"storageUser\"));\r\n    // const [tasks, setTasks] = useState([]);\r\n\r\n    const classes = useStyles();\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n    return (\r\n        <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <OverallStats tmpUser={user} category={\"Meeting\"}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <OverallStats tmpUser={user} category={\"Training\"} />\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <OverallStats tmpUser={user} category={\"Education\"}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <OverallStats tmpUser={user} category={\"General\"}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <OverallStats tmpUser={user} category={\"Home\"}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <OverallStats tmpUser={user} category={\"All\"}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <TaskTable tmpUser={user}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} md={8} lg={9}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <Chart  tmpUser ={user}/>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    </main>\r\n    );\r\n};\r\nexport default Dashboard;\r\n\r\n\r\n\r\n\r\n","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Chart.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\OverallStats.js",["74"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TasksTable.js",["75"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport axios from \"axios\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nfunction createData(name, status, category, start, duration, id) {\r\n    return { name, status, category, start, duration, id };\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    { id: 'name', numeric: false, disablePadding: true, label: 'Task Name' },\r\n    { id: 'status', numeric: true, disablePadding: false, label: 'Status' },\r\n    { id: 'category', numeric: true, disablePadding: false, label: 'Category' },\r\n    { id: 'start', numeric: true, disablePadding: false, label: 'Start' },\r\n    { id: 'duration', numeric: true, disablePadding: false, label: 'Duration' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    All Tasks\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <Tooltip title=\"Filter list\">\r\n                    <IconButton aria-label=\"filter list\">\r\n                        <FilterListIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nexport default function EnhancedTable({tmpUser}) {\r\n\r\n    const [tasks, setTasks] = useState([])\r\n    const [rows, setTmpRows] = useState([])\r\n\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('category');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const getAllTasks = () => {\r\n        return(\r\n            axios.post(`http://localhost:5500/api/tasks/`, {\r\n                email: tmpUser.email,\r\n            }).then((response => {\r\n                setTasks(response.data)\r\n            })))\r\n    }\r\n\r\n    function createRows(){\r\n        if (tasks.length>0) {\r\n            let tmpArr = []\r\n            tasks.map(task => (\r\n                tmpArr.push(createData(task.taskName, task.status, task.category,task.startTime, task.durationMin,task._id))\r\n            ))\r\n            setTmpRows([...tmpArr])\r\n            console.log(\"tmp\", rows)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (tasks.length===0){\r\n            console.log(tasks.length)\r\n            getAllTasks();\r\n        }\r\n        },[]);\r\n\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.name);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        {rows.length>0?<TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.name);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row.name)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.name}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    value={row.id}\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.name}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{row.status}</TableCell>\r\n                                            <TableCell align=\"left\">{row.category}</TableCell>\r\n                                            <TableCell align=\"left\">{row.start}</TableCell>\r\n                                            <TableCell align=\"left\">{row.duration}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>:createRows()}\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Title.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\profile.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\ProfileDetails.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":26,"column":22,"nodeType":"82","messageId":"83","endLine":26,"endColumn":28},{"ruleId":"80","severity":1,"message":"84","line":31,"column":8,"nodeType":"82","messageId":"83","endLine":31,"endColumn":17},{"ruleId":"80","severity":1,"message":"85","line":131,"column":12,"nodeType":"82","messageId":"83","endLine":131,"endColumn":17},{"ruleId":"80","severity":1,"message":"86","line":131,"column":19,"nodeType":"82","messageId":"83","endLine":131,"endColumn":27},{"ruleId":"80","severity":1,"message":"87","line":141,"column":11,"nodeType":"82","messageId":"83","endLine":141,"endColumn":27},{"ruleId":"88","severity":1,"message":"89","line":153,"column":8,"nodeType":"90","endLine":153,"endColumn":10,"suggestions":"91"},{"ruleId":"80","severity":1,"message":"92","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":21},{"ruleId":"80","severity":1,"message":"93","line":9,"column":8,"nodeType":"82","messageId":"83","endLine":9,"endColumn":22},{"ruleId":"80","severity":1,"message":"94","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":11},{"ruleId":"80","severity":1,"message":"95","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":18},{"ruleId":"80","severity":1,"message":"96","line":9,"column":8,"nodeType":"82","messageId":"83","endLine":9,"endColumn":12},{"ruleId":"88","severity":1,"message":"97","line":42,"column":8,"nodeType":"90","endLine":42,"endColumn":10,"suggestions":"98"},{"ruleId":"88","severity":1,"message":"99","line":237,"column":11,"nodeType":"90","endLine":237,"endColumn":13,"suggestions":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'tasks' is assigned a value but never used.","'setTasks' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["103"],"'ListSubheader' is defined but never used.","'AssignmentIcon' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'tasksByCategory'. Either include it or remove the dependency array.",["104"],"React Hook useEffect has missing dependencies: 'getAllTasks' and 'tasks.length'. Either include them or remove the dependency array.",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [history, user]",{"range":"112","text":"113"},"Update the dependencies array to be: [tasksByCategory]",{"range":"114","text":"115"},"Update the dependencies array to be: [getAllTasks, tasks.length]",{"range":"116","text":"117"},[4778,4780],"[history, user]",[1398,1400],"[tasksByCategory]",[8221,8223],"[getAllTasks, tasks.length]"]