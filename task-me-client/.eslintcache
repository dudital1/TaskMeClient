[{"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\index.js":"1","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\App.js":"2","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signup.js":"3","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signin.js":"4","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\verifyLink.js":"5","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\main.js":"6","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Dashboard.js":"7","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\listItems.js":"8","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\profile.js":"9","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\OverallStats.js":"10","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\ProfileDetails.js":"11","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\TasksTable.js":"12","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Title.js":"13","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\HeadTable.js":"14","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormDialog.js":"15","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\calender.js":"16","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Stats.js":"17","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\piChart.js":"18"},{"size":241,"mtime":1612126866112,"results":"19","hashOfConfig":"20"},{"size":624,"mtime":1612162685890,"results":"21","hashOfConfig":"20"},{"size":5268,"mtime":1612199318918,"results":"22","hashOfConfig":"20"},{"size":6276,"mtime":1612208990191,"results":"23","hashOfConfig":"20"},{"size":827,"mtime":1612162853982,"results":"24","hashOfConfig":"20"},{"size":7975,"mtime":1612870293223,"results":"25","hashOfConfig":"20"},{"size":3580,"mtime":1612870519880,"results":"26","hashOfConfig":"20"},{"size":2423,"mtime":1612870251287,"results":"27","hashOfConfig":"20"},{"size":1559,"mtime":1612870303442,"results":"28","hashOfConfig":"20"},{"size":1909,"mtime":1612869986243,"results":"29","hashOfConfig":"20"},{"size":1848,"mtime":1612206704819,"results":"30","hashOfConfig":"20"},{"size":13231,"mtime":1612910058438,"results":"31","hashOfConfig":"20"},{"size":376,"mtime":1612126866109,"results":"32","hashOfConfig":"20"},{"size":4533,"mtime":1612870062830,"results":"33","hashOfConfig":"20"},{"size":6469,"mtime":1612719934019,"results":"34","hashOfConfig":"20"},{"size":2829,"mtime":1612870514660,"results":"35","hashOfConfig":"20"},{"size":3530,"mtime":1612877937174,"results":"36","hashOfConfig":"20"},{"size":933,"mtime":1612964622581,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1byuelv",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\index.js",[],["79","80"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\App.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signup.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signin.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\verifyLink.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\main.js",["81"],"import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n// import List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Link from '@material-ui/core/Link';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n// import { mainListItems, secondaryListItems } from './listItems';\r\nimport MainListItems from './listItems';\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import {\r\n//     BrowserRouter as Router,\r\n//     Route, Switch as Sw,\r\n// } from \"react-router-dom\";\r\nimport Dashboard from './Dashboard';\r\nimport Box from \"@material-ui/core/Box\";\r\n// import Container from \"@material-ui/core/Container\";\r\nimport Profile from './profile';\r\nimport Stats from './Stats';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright Â© '}\r\n            <Link color=\"inherit\" href=\"#\">\r\n                TaskMe - David and Saar Ltd\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\nconst Main = () => {\r\n\r\n    let history = useHistory();\r\n    const user = JSON.parse(localStorage.getItem(\"storageUser\"));\r\n    // const [tasks, setTasks] = useState([]);\r\n    const [content , setContent] = useState(\"dashboard\")\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    }\r\n    // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:5500/auth/sign-in\").then((response) => {\r\n            if (response.data.loggedIn === false) {\r\n                localStorage.clear();\r\n                history.push('/');\r\n            }\r\n            console.log(user)\r\n\r\n        }\r\n        )\r\n    }, []);\r\n\r\n    function logout() {\r\n        axios.get('http://localhost:5500/auth/logout').then(() => {\r\n            localStorage.clear();\r\n            history.push('/');\r\n        })\r\n    }\r\n    function updateContent(tmpContent){\r\n        setContent(tmpContent)\r\n    }\r\n    function switchContent(){\r\n        if(content===\"dashboard\")\r\n            return <Dashboard />\r\n        if (content===\"profile\")\r\n            return <Profile />\r\n        if (content===\"Stats\")\r\n            return <Stats />\r\n    }\r\n\r\n\r\n    const [darkMode, setDarkMode] = useState(false)\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: darkMode ? \"dark\" : \"light\",\r\n        },\r\n    });\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            {user ? user.name.toUpperCase() : \"\"}\r\n                        </Typography>\r\n                    Dark Mode\r\n                    <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)}></Switch>\r\n                        <Avatar alt=\"Remy Sharp\" src={user.picture} />\r\n\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge color=\"secondary\" >\r\n                                <ExitToAppIcon onClick={logout} />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                    <Divider />\r\n                    <MainListItems setContent={updateContent}/>\r\n                    <Divider />\r\n                    {/*<List>{secondaryListItems}</List>*/}\r\n                </Drawer>\r\n                {switchContent()}\r\n            </div>\r\n            <Box pt={4}>\r\n                <Copyright />\r\n            </Box>\r\n        </ThemeProvider>\r\n    );\r\n};\r\nexport default Main;\r\n\r\n","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Dashboard.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\listItems.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\profile.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\OverallStats.js",["82"],"import React from 'react';\r\n// import Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Title from './Title';\r\nimport axios from \"axios\";\r\n// import { useHistory } from \"react-router-dom\";\r\nimport {useEffect, useState} from 'react';\r\n\r\n// function preventDefault(event) {\r\n//     event.preventDefault();\r\n// }\r\nconst useStyles = makeStyles({\r\n    depositContext: {\r\n        flex: 1,\r\n    },\r\n});\r\n\r\nexport default function OverallStats({tmpUser, category}) {\r\n\r\n    const classes = useStyles();\r\n    const user = (tmpUser);\r\n    // const [allTasks , setAllTasks ] = useState([]);\r\n    const [categoryLength , setCategoryLength ] = useState([]);\r\n    const [completedNumber , setCompletedNumber ] = useState(null);\r\n\r\n    const tasksByCategory = () => {\r\n        let call=`http://localhost:5500/api/tasks/?category=${category}`\r\n        if (category===\"All\")\r\n            call=\"http://localhost:5500/api/tasks/\"\r\n        return(\r\n        axios.post(`${call}`, {\r\n            email: user.email,\r\n        }).then((response => {\r\n            // setAllTasks(response.data)\r\n            setCategoryLength(response.data.length)\r\n            setCompletedNumber(response.data.filter(task => task.status===\"Done\").length)\r\n        })))\r\n    }\r\n    useEffect(() => {\r\n        tasksByCategory();\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography component=\"p\" variant=\"h4\">\r\n                {category}\r\n            </Typography>\r\n            <Title>{completedNumber?completedNumber:\"0\"}/{categoryLength?categoryLength:\"0\"}</Title>\r\n            <Typography component=\"p\" variant=\"h4\">\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" className={classes.depositContext}>\r\n                Completed\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\ProfileDetails.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\TasksTable.js",["83"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import clsx from 'clsx';\r\nimport { makeStyles,fade } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport EnhancedTableToolbar from './HeadTable';\r\n// import FormDialog from \"./FormDialog\";\r\n\r\nimport axios from \"axios\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nfunction createData(name, status, category, start, duration, id) {\r\n    return { name, status, category, start, duration, id };\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\nconst headCells = [\r\n    { id: 'name', numeric: false, disablePadding: true, label: 'Task Name' },\r\n    { id: 'status', numeric: true, disablePadding: false, label: 'Status' },\r\n    { id: 'category', numeric: true, disablePadding: false, label: 'Category' },\r\n    { id: 'start', numeric: true, disablePadding: false, label: 'Start' },\r\n    { id: 'duration', numeric: true, disablePadding: false, label: 'Duration' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n    }\r\n}));\r\n\r\nexport default function TaskTable({tmpUser}) {\r\n\r\n    const [tasks, setTasks] = useState([])\r\n    const [rows, setTmpRows] = useState([])\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('category');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const getAllTasks = () => {\r\n        return(\r\n            axios.post(`http://localhost:5500/api/tasks/`, {\r\n                email: tmpUser.email,\r\n            }).then((response => {\r\n                setTasks(response.data)\r\n            })))\r\n    }\r\n    const getTasksSearch = (serchWord) => {\r\n        return(\r\n            axios.post(`http://localhost:5500/api/tasks/search/`, {\r\n                email: tmpUser.email,\r\n                searchBy:serchWord,\r\n            }).then((response => {\r\n                setTasks(response.data)\r\n            })))\r\n    }\r\n\r\n    function createRows(){\r\n        if (tasks.length>0 && rows.length<1) {\r\n            let tmpArr = []\r\n            tasks.map(task => (\r\n                tmpArr.push(createData(task.taskName, task.status, task.category,task.startTime, task.durationMin,task._id))\r\n            ))\r\n            setTmpRows([...tmpArr])\r\n            console.log(\"tmp\", rows)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (tasks.length===0){\r\n            console.log(tasks.length)\r\n            getAllTasks();\r\n        }\r\n        },[]);\r\n\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.name);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    function searchTasks(searchWord){\r\n        let tmpArr = []\r\n        if(searchWord.length>1) {\r\n            getTasksSearch(searchWord).then(\r\n                tasks.map(task => (\r\n                    tmpArr.push(createData(task.taskName, task.status, task.category, task.startTime, task.durationMin, task._id))\r\n                )),\r\n                setTmpRows([...tmpArr]));\r\n        }\r\n        else {\r\n            getAllTasks().then(\r\n                tasks.map(task => (\r\n                    tmpArr.push(createData(task.taskName, task.status, task.category, task.startTime, task.durationMin, task._id))\r\n                )),\r\n                setTmpRows([...tmpArr]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length} search={searchTasks}  />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        {rows.length>0?<TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.name);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row.name)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.name}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    value={row.id}\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.name}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{row.status}</TableCell>\r\n                                            <TableCell align=\"left\">{row.category}</TableCell>\r\n                                            <TableCell align=\"left\">{row.start}</TableCell>\r\n                                            <TableCell align=\"left\">{row.duration}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>:createRows()}\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Title.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\HeadTable.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormDialog.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\calender.js",["84","85","86","87"],"import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { ViewState } from '@devexpress/dx-react-scheduler';\r\nimport {\r\n    Scheduler,\r\n    WeekView,\r\n    Appointments,\r\n    Toolbar,\r\n    ViewSwitcher,\r\n    MonthView,\r\n    DayView,\r\n    TodayButton,\r\n    DateNavigator,\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\n\r\nconst Calender = ({ tmpUser }) => {\r\n    const [data, setData] = useState([]);\r\n    const [currentViewName, setCurrentViewName] = useState('work-week');\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const getAllTasks = () => {\r\n        return (\r\n            axios.post(`http://localhost:5500/api/tasks/`, {\r\n                email: tmpUser.email,\r\n            }).then((response => {\r\n                response.data.map((item) => {\r\n                    data.push(item);\r\n                })\r\n                if (data) {\r\n                    data.map(item => {\r\n                        let tmpTask = {\r\n                            title: item.taskName,\r\n                            startDate: Date.parse(item.startTime),\r\n                            endDate: Date.parse(item.endTime)\r\n                        }\r\n                        tasks.push(tmpTask);\r\n                        setTasks([...tasks]);\r\n                    })\r\n                } else {\r\n                    console.log(data);\r\n                }\r\n                tasks.map(item => {\r\n                    console.log(item);\r\n                })\r\n            })))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data.length === 0) {\r\n            getAllTasks();\r\n            setData([...data]);\r\n            setTasks([...tasks]);\r\n        }\r\n    }, []);\r\n\r\n    const currentViewNameChange = (currentViewName) => {\r\n        setCurrentViewName(currentViewName);\r\n    }\r\n\r\n    return (\r\n        <Paper>\r\n            <Scheduler\r\n                data={tasks}\r\n                height={\"100%\"}\r\n            >\r\n                <ViewState\r\n                    defaultCurrentDate={Date.now()}\r\n                    currentViewName={currentViewName}\r\n                    onCurrentViewNameChange={currentViewNameChange}\r\n                />\r\n                <Toolbar />\r\n                <DateNavigator />\r\n                <TodayButton />\r\n                <WeekView\r\n                    name=\"work-week\"\r\n                    displayName=\"Week\"\r\n                    startDayHour={6}\r\n                    endDayHour={24}\r\n                    cellDuration={60}\r\n                />\r\n                <MonthView />\r\n                <DayView\r\n                    cellDuration={60}\r\n                />\r\n\r\n                <ViewSwitcher />\r\n                <Appointments />\r\n            </Scheduler>\r\n        </Paper>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Calender;\r\n","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Stats.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\piChart.js",["88","89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":153,"column":8,"nodeType":"96","endLine":153,"endColumn":10,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":42,"column":8,"nodeType":"96","endLine":42,"endColumn":10,"suggestions":"99"},{"ruleId":"94","severity":1,"message":"100","line":197,"column":11,"nodeType":"96","endLine":197,"endColumn":13,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":28,"column":42,"nodeType":"104","messageId":"105","endLine":28,"endColumn":44},{"ruleId":"102","severity":1,"message":"103","line":32,"column":35,"nodeType":"104","messageId":"105","endLine":32,"endColumn":37},{"ruleId":"102","severity":1,"message":"103","line":44,"column":32,"nodeType":"104","messageId":"105","endLine":44,"endColumn":34},{"ruleId":"94","severity":1,"message":"106","line":56,"column":8,"nodeType":"96","endLine":56,"endColumn":10,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"103","line":20,"column":28,"nodeType":"104","messageId":"105","endLine":20,"endColumn":30},{"ruleId":"94","severity":1,"message":"108","line":28,"column":4,"nodeType":"96","endLine":28,"endColumn":6,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has a missing dependency: 'tasksByCategory'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'getAllTasks' and 'tasks.length'. Either include them or remove the dependency array.",["114"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'data', 'getAllTasks', and 'tasks'. Either include them or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["115"],"React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.",["116"],"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [history, user]",{"range":"127","text":"128"},"Update the dependencies array to be: [tasksByCategory]",{"range":"129","text":"130"},"Update the dependencies array to be: [getAllTasks, tasks.length]",{"range":"131","text":"132"},"Update the dependencies array to be: [data, getAllTasks, tasks]",{"range":"133","text":"134"},"Update the dependencies array to be: [getStats]",{"range":"135","text":"136"},[4886,4888],"[history, user]",[1398,1400],"[tasksByCategory]",[6940,6942],"[getAllTasks, tasks.length]",[1741,1743],"[data, getAllTasks, tasks]",[685,687],"[getStats]"]