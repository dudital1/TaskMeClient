[{"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\index.js":"1","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\App.js":"2","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signin.js":"3","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signup.js":"4","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\verifyLink.js":"5","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\main.js":"6","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Dashboard.js":"7","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\listItems.js":"8","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\profile.js":"9","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Stats.js":"10","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\calender.js":"11","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\piChart.js":"12","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\ProfileDetails.js":"13","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\OverallStats.js":"14","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\stackChart.js":"15","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\meanHoursChart.js":"16","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\TasksTable.js":"17","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\HeadTable.js":"18","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormAddTask.js":"19","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormDialog.js":"20"},{"size":241,"mtime":1612126866112,"results":"21","hashOfConfig":"22"},{"size":624,"mtime":1612162685890,"results":"23","hashOfConfig":"22"},{"size":6276,"mtime":1612208990191,"results":"24","hashOfConfig":"22"},{"size":5268,"mtime":1612199318918,"results":"25","hashOfConfig":"22"},{"size":827,"mtime":1612162853982,"results":"26","hashOfConfig":"22"},{"size":7975,"mtime":1612870293223,"results":"27","hashOfConfig":"22"},{"size":3580,"mtime":1612870519880,"results":"28","hashOfConfig":"22"},{"size":2423,"mtime":1612870251287,"results":"29","hashOfConfig":"22"},{"size":1559,"mtime":1612870303442,"results":"30","hashOfConfig":"22"},{"size":4134,"mtime":1612999844624,"results":"31","hashOfConfig":"22"},{"size":2829,"mtime":1612870514660,"results":"32","hashOfConfig":"22"},{"size":1168,"mtime":1612999932268,"results":"33","hashOfConfig":"22"},{"size":1848,"mtime":1612206704819,"results":"34","hashOfConfig":"22"},{"size":2082,"mtime":1612999941627,"results":"35","hashOfConfig":"22"},{"size":1899,"mtime":1612999921338,"results":"36","hashOfConfig":"22"},{"size":1578,"mtime":1613000033752,"results":"37","hashOfConfig":"22"},{"size":13256,"mtime":1613045644817,"results":"38","hashOfConfig":"22"},{"size":4823,"mtime":1613045644816,"results":"39","hashOfConfig":"22"},{"size":6373,"mtime":1613045644813,"results":"40","hashOfConfig":"22"},{"size":7901,"mtime":1613045644815,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1byuelv",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\index.js",[],["92","93"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\App.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signin.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signup.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\verifyLink.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\main.js",["94"],"import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n// import List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Link from '@material-ui/core/Link';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n// import { mainListItems, secondaryListItems } from './listItems';\r\nimport MainListItems from './listItems';\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import {\r\n//     BrowserRouter as Router,\r\n//     Route, Switch as Sw,\r\n// } from \"react-router-dom\";\r\nimport Dashboard from './Dashboard';\r\nimport Box from \"@material-ui/core/Box\";\r\n// import Container from \"@material-ui/core/Container\";\r\nimport Profile from './profile';\r\nimport Stats from './Stats';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright Â© '}\r\n            <Link color=\"inherit\" href=\"#\">\r\n                TaskMe - David and Saar Ltd\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\nconst Main = () => {\r\n\r\n    let history = useHistory();\r\n    const user = JSON.parse(localStorage.getItem(\"storageUser\"));\r\n    // const [tasks, setTasks] = useState([]);\r\n    const [content , setContent] = useState(\"dashboard\")\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    }\r\n    // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:5500/auth/sign-in\").then((response) => {\r\n            if (response.data.loggedIn === false) {\r\n                localStorage.clear();\r\n                history.push('/');\r\n            }\r\n            console.log(user)\r\n\r\n        }\r\n        )\r\n    }, []);\r\n\r\n    function logout() {\r\n        axios.get('http://localhost:5500/auth/logout').then(() => {\r\n            localStorage.clear();\r\n            history.push('/');\r\n        })\r\n    }\r\n    function updateContent(tmpContent){\r\n        setContent(tmpContent)\r\n    }\r\n    function switchContent(){\r\n        if(content===\"dashboard\")\r\n            return <Dashboard />\r\n        if (content===\"profile\")\r\n            return <Profile />\r\n        if (content===\"Stats\")\r\n            return <Stats />\r\n    }\r\n\r\n\r\n    const [darkMode, setDarkMode] = useState(false)\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: darkMode ? \"dark\" : \"light\",\r\n        },\r\n    });\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerOpen}\r\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            {user ? user.name.toUpperCase() : \"\"}\r\n                        </Typography>\r\n                    Dark Mode\r\n                    <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)}></Switch>\r\n                        <Avatar alt=\"Remy Sharp\" src={user.picture} />\r\n\r\n                        <IconButton color=\"inherit\">\r\n                            <Badge color=\"secondary\" >\r\n                                <ExitToAppIcon onClick={logout} />\r\n                            </Badge>\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                    }}\r\n                    open={open}\r\n                >\r\n                    <div className={classes.toolbarIcon}>\r\n                        <IconButton onClick={handleDrawerClose}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                    <Divider />\r\n                    <MainListItems setContent={updateContent}/>\r\n                    <Divider />\r\n                    {/*<List>{secondaryListItems}</List>*/}\r\n                </Drawer>\r\n                {switchContent()}\r\n            </div>\r\n            <Box pt={4}>\r\n                <Copyright />\r\n            </Box>\r\n        </ThemeProvider>\r\n    );\r\n};\r\nexport default Main;\r\n\r\n","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Dashboard.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\listItems.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\profile.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Stats.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\calender.js",["95","96","97","98"],"import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { ViewState } from '@devexpress/dx-react-scheduler';\r\nimport {\r\n    Scheduler,\r\n    WeekView,\r\n    Appointments,\r\n    Toolbar,\r\n    ViewSwitcher,\r\n    MonthView,\r\n    DayView,\r\n    TodayButton,\r\n    DateNavigator,\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\n\r\nconst Calender = ({ tmpUser }) => {\r\n    const [data, setData] = useState([]);\r\n    const [currentViewName, setCurrentViewName] = useState('work-week');\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const getAllTasks = () => {\r\n        return (\r\n            axios.post(`http://localhost:5500/api/tasks/`, {\r\n                email: tmpUser.email,\r\n            }).then((response => {\r\n                response.data.map((item) => {\r\n                    data.push(item);\r\n                })\r\n                if (data) {\r\n                    data.map(item => {\r\n                        let tmpTask = {\r\n                            title: item.taskName,\r\n                            startDate: Date.parse(item.startTime),\r\n                            endDate: Date.parse(item.endTime)\r\n                        }\r\n                        tasks.push(tmpTask);\r\n                        setTasks([...tasks]);\r\n                    })\r\n                } else {\r\n                    console.log(data);\r\n                }\r\n                tasks.map(item => {\r\n                    console.log(item);\r\n                })\r\n            })))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data.length === 0) {\r\n            getAllTasks();\r\n            setData([...data]);\r\n            setTasks([...tasks]);\r\n        }\r\n    }, []);\r\n\r\n    const currentViewNameChange = (currentViewName) => {\r\n        setCurrentViewName(currentViewName);\r\n    }\r\n\r\n    return (\r\n        <Paper>\r\n            <Scheduler\r\n                data={tasks}\r\n                height={\"100%\"}\r\n            >\r\n                <ViewState\r\n                    defaultCurrentDate={Date.now()}\r\n                    currentViewName={currentViewName}\r\n                    onCurrentViewNameChange={currentViewNameChange}\r\n                />\r\n                <Toolbar />\r\n                <DateNavigator />\r\n                <TodayButton />\r\n                <WeekView\r\n                    name=\"work-week\"\r\n                    displayName=\"Week\"\r\n                    startDayHour={6}\r\n                    endDayHour={24}\r\n                    cellDuration={60}\r\n                />\r\n                <MonthView />\r\n                <DayView\r\n                    cellDuration={60}\r\n                />\r\n\r\n                <ViewSwitcher />\r\n                <Appointments />\r\n            </Scheduler>\r\n        </Paper>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Calender;\r\n","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\piChart.js",["99","100"],"import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  Chart,\r\n  PieSeries,\r\n  Title,\r\n  Legend,\r\n  Tooltip,\r\n\r\n\r\n} from '@devexpress/dx-react-chart-material-ui';\r\nimport { EventTracker , Animation} from '@devexpress/dx-react-chart';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PieChart = ({ tmpUser }) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  function getStats() {\r\n    axios.post('http://localhost:5500/api/tasks/stats', {\r\n      email: tmpUser.email,\r\n    }).then((response => {\r\n      setData(response.data);\r\n      response.data.map(item => {\r\n        console.log(item);\r\n      })\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    getStats();\r\n  }, []);\r\n\r\n  return (\r\n    <Paper>\r\n      <Chart\r\n        data={data ? data : []}\r\n      >\r\n        <PieSeries\r\n          valueField=\"all\"\r\n          argumentField=\"name\"\r\n        />\r\n\r\n        <Title\r\n          text=\"Tasks by category\"\r\n\r\n        />\r\n        <Legend position=\"bottom\"/>\r\n        <EventTracker/>\r\n        <Tooltip />\r\n        <Animation duration={3000}/>\r\n      </Chart>\r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\nexport default PieChart;","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\ProfileDetails.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\OverallStats.js",["101"],"import React from 'react';\r\n// import Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from \"axios\";\r\n// import { useHistory } from \"react-router-dom\";\r\nimport {useEffect, useState} from 'react';\r\n\r\n// function preventDefault(event) {\r\n//     event.preventDefault();\r\n// }\r\nconst useStyles = makeStyles({\r\n    fragment: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\", \r\n        flexDirection: \"column\",\r\n        alignItems: \"center\", \r\n        margin: \"auto\"\r\n    },\r\n    depositContext: {\r\n        flex: 1,\r\n    },\r\n});\r\n\r\nexport default function OverallStats({tmpUser, category}) {\r\n\r\n    const classes = useStyles();\r\n    const user = (tmpUser);\r\n    // const [allTasks , setAllTasks ] = useState([]);\r\n    const [categoryLength , setCategoryLength ] = useState([]);\r\n    const [completedNumber , setCompletedNumber ] = useState(null);\r\n\r\n    const tasksByCategory = () => {\r\n        let call=`http://localhost:5500/api/tasks/?category=${category}`\r\n        if (category===\"All\")\r\n            call=\"http://localhost:5500/api/tasks/\"\r\n        return(\r\n        axios.post(`${call}`, {\r\n            email: user.email,\r\n        }).then((response => {\r\n            // setAllTasks(response.data)\r\n            setCategoryLength(response.data.length)\r\n            setCompletedNumber(response.data.filter(task => task.status===\"Done\").length)\r\n        })))\r\n    }\r\n    useEffect(() => {\r\n        tasksByCategory();\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment >\r\n            <div className={classes.fragment}>\r\n            <Typography component=\"p\" variant=\"h4\">\r\n                {category}\r\n            </Typography>\r\n            <Typography variant=\"h5\">{completedNumber?completedNumber:\"0\"}/{categoryLength?categoryLength:\"0\"}</Typography>\r\n            <Typography variant=\"h6\" color=\"textSecondary\" className={classes.depositContext}>\r\n                Completed\r\n            </Typography >\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\stackChart.js",["102","103"],"import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n    Chart,\r\n    Title,\r\n    Legend,\r\n    Tooltip,\r\n    ArgumentAxis,\r\n    ValueAxis,\r\n    BarSeries,\r\n\r\n} from '@devexpress/dx-react-chart-material-ui';\r\nimport { Stack } from '@devexpress/dx-react-chart';\r\nimport { EventTracker , Animation} from '@devexpress/dx-react-chart';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst StackChart = ({ tmpUser }) => {\r\n    const [data, setData] = useState([]);\r\n\r\n    function getStats() {\r\n        axios.post('http://localhost:5500/api/tasks/stats', {\r\n            email: tmpUser.email,\r\n        }).then((response => {\r\n            setData(response.data);\r\n            response.data.map(item => {\r\n                console.log(item);\r\n            })\r\n        }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getStats();\r\n    }, []);\r\n\r\n    return (\r\n        <Paper>\r\n            <Chart\r\n                data={data ? data : []}\r\n            >\r\n                <Title\r\n                    text=\"Tasks status\"\r\n\r\n                />\r\n                <ArgumentAxis />\r\n                <ValueAxis />\r\n\r\n                <BarSeries\r\n                    valueField=\"done\"\r\n                    argumentField=\"name\"\r\n                    name=\"Done\"\r\n                />\r\n                <BarSeries\r\n                    valueField=\"In progress\"\r\n                    argumentField=\"name\"\r\n                    name=\"In progress\"\r\n                />\r\n                <BarSeries\r\n                    valueField=\"New\"\r\n                    argumentField=\"name\"\r\n                    name=\"New\"\r\n                />\r\n                <Stack />\r\n                <Legend />\r\n                <EventTracker />\r\n                <Tooltip />\r\n                <Animation duration={3000}/>\r\n            </Chart>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n\r\nexport default StackChart;","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\meanHoursChart.js",["104","105"],"import * as React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n    Chart,\r\n    Title,\r\n    Legend,\r\n    Tooltip,\r\n    ArgumentAxis,\r\n    ValueAxis,\r\n    BarSeries,\r\n\r\n} from '@devexpress/dx-react-chart-material-ui';\r\nimport { Stack } from '@devexpress/dx-react-chart';\r\nimport { EventTracker ,Animation} from '@devexpress/dx-react-chart';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst MeanHoursChart = ({ tmpUser }) => {\r\n    const [data, setData] = useState([]);\r\n\r\n    function getStats() {\r\n        axios.post('http://localhost:5500/api/tasks/stats', {\r\n            email: tmpUser.email,\r\n        }).then((response => {\r\n            setData(response.data);\r\n            response.data.map(item => {\r\n                console.log(item);\r\n            })\r\n        }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getStats();\r\n    }, []);\r\n\r\n    return (\r\n        <Paper>\r\n            <Chart\r\n                data={data ? data : []}\r\n            >\r\n                <Title\r\n                    text=\"Duration By Category\"\r\n\r\n                />\r\n                <ArgumentAxis />\r\n                <ValueAxis />\r\n\r\n                <BarSeries\r\n                    valueField=\"mean\"\r\n                    argumentField=\"name\"\r\n                    name=\"Done\"\r\n                />\r\n                <Stack />\r\n                <Legend />\r\n                <EventTracker />\r\n                <Tooltip />\r\n                <Animation duration={3000}/>\r\n            </Chart>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n\r\nexport default MeanHoursChart;","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\TasksTable.js",["106"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import clsx from 'clsx';\r\nimport { makeStyles,fade } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport EnhancedTableToolbar from './HeadTable';\r\n// import FormDialog from \"./FormDialog\";\r\n\r\nimport axios from \"axios\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nfunction createData(name, status, category, start, duration, id) {\r\n    return { name, status, category, start, duration, id };\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\nconst headCells = [\r\n    { id: 'name', numeric: false, disablePadding: true, label: 'Task Name' },\r\n    { id: 'status', numeric: true, disablePadding: false, label: 'Status' },\r\n    { id: 'category', numeric: true, disablePadding: false, label: 'Category' },\r\n    { id: 'start', numeric: true, disablePadding: false, label: 'Start' },\r\n    { id: 'duration', numeric: true, disablePadding: false, label: 'Duration' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n    }\r\n}));\r\n\r\nexport default function TaskTable({tmpUser}) {\r\n\r\n    const [tasks, setTasks] = useState([])\r\n    const [rows, setTmpRows] = useState([])\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('category');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const getAllTasks = () => {\r\n        return(\r\n            axios.post(`http://localhost:5500/api/tasks/`, {\r\n                email: tmpUser.email,\r\n            }).then((response => {\r\n                setTasks(response.data)\r\n            })))\r\n    }\r\n    const getTasksSearch = (serchWord) => {\r\n        return(\r\n            axios.post(`http://localhost:5500/api/tasks/search/`, {\r\n                email: tmpUser.email,\r\n                searchBy:serchWord,\r\n            }).then((response => {\r\n                setTasks(response.data)\r\n            })))\r\n    }\r\n\r\n    function createRows(){\r\n        if (tasks.length>0 && rows.length<1) {\r\n            let tmpArr = []\r\n            tasks.map(task => (\r\n                tmpArr.push(createData(task.taskName, task.status, task.category,task.startTime, task.durationMin,task._id))\r\n            ))\r\n            setTmpRows([...tmpArr])\r\n            console.log(\"tmp\", rows)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (tasks.length===0){\r\n            console.log(tasks.length)\r\n            getAllTasks();\r\n        }\r\n        },[]);\r\n\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.id);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    const isSelected = (id) => selected.indexOf(id) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    function searchTasks(searchWord){\r\n        let tmpArr = []\r\n        if(searchWord.length>1) {\r\n            getTasksSearch(searchWord).then(\r\n                tasks.map(task => (\r\n                    tmpArr.push(createData(task.taskName, task.status, task.category, task.startTime, task.durationMin, task._id))\r\n                )),\r\n                setTmpRows([...tmpArr]));\r\n        }\r\n        else {\r\n            getAllTasks().then(\r\n                tasks.map(task => (\r\n                    tmpArr.push(createData(task.taskName, task.status, task.category, task.startTime, task.durationMin, task._id))\r\n                )),\r\n                setTmpRows([...tmpArr]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar selected={selected} numSelected={selected.length} search={searchTasks} email={tmpUser.email} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        {rows.length>0?<TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.id);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row.id)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.id}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    value={row.id}\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.name}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{row.status}</TableCell>\r\n                                            <TableCell align=\"left\">{row.category}</TableCell>\r\n                                            <TableCell align=\"left\">{row.start}</TableCell>\r\n                                            <TableCell align=\"left\">{row.duration}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>:createRows()}\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\HeadTable.js",["107","108"],"import {fade, lighten, makeStyles} from \"@material-ui/core/styles\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport clsx from \"clsx\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport FormDialog from \"./FormDialog\";\r\nimport FormAddTask from \"./FormAddTask\";\r\n// import TableRow from \"@material-ui/core/TableRow\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: '12ch',\r\n            '&:focus': {\r\n                width: '20ch',\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = ({selected,numSelected ,search,email}) => {\r\n    // const [value, setValue] = React.useState()\r\n    const classes = useToolbarStyles();\r\n    function triggerSearch (tmpValue) {\r\n        // setValue(tmpValue)\r\n        search(tmpValue)\r\n    };\r\n    function deleteSelected(){\r\n        selected.map(task => {\r\n            axios.delete(`http://localhost:5500/api/tasks/${task}`).then((response => {\r\n                if (response.data.deletedCount!=0) {\r\n                    console.log(\"Task deleted!!\");\r\n                } else {\r\n                    console.log('Failed to delete task');\r\n                }\r\n            }))\r\n        })\r\n    };\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    All Tasks\r\n                </Typography>\r\n            )}\r\n            <FormAddTask email={email}/>\r\n            <FormDialog task={selected} numSelected={numSelected}/>\r\n            <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <InputBase\r\n                    placeholder=\"Searchâ¦\"\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    onChange={event=>{triggerSearch(event.target.value)}}\r\n                />\r\n            </div>\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\" onClick={deleteSelected}>\r\n\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (<div></div>)}\r\n        </Toolbar>\r\n    );\r\n};\r\nexport default EnhancedTableToolbar;\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormAddTask.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormDialog.js",["109"],"import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport axios from 'axios';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(({\r\n\r\n    dialogForm: {\r\n        display: \"flex\" , \r\n        flexDirection: \"column\" ,\r\n    }\r\n}));\r\n\r\nexport default function FormDialog({ task, numSelected }) {\r\n    const [currentTask, setCurrentTask] = useState({});\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleClickOpen = () => {\r\n        if (numSelected>1){\r\n            alert(\"Can't edit more than 1 task.\")\r\n\r\n        }\r\n        else if(numSelected==0){\r\n            alert(\"Choose a task to edit.\")\r\n        }\r\n        else {\r\n            loadTask(task)\r\n            setOpen(true);\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        console.log(currentTask);\r\n        console.log(task);\r\n        setOpen(false);\r\n    };\r\n    const handleUpdate = () => {\r\n        console.log(currentTask);\r\n        console.log(\"taks\",task);\r\n        console.log(\"taskName\",currentTask.taskName);\r\n        console.log(\"duration\",currentTask.durationMin);\r\n        console.log(\"startTime\",currentTask.startTime);\r\n        console.log(\"description\",currentTask.description);\r\n        console.log(\"status\",currentTask.status);\r\n        console.log(\"category\",currentTask.category);\r\n        axios.put(`http://localhost:5500/api/tasks`, {\r\n            _id: task,\r\n            taskName: currentTask.taskName,\r\n            durationMin: currentTask.durationMin,\r\n            startTime: currentTask.startTime,\r\n            description: currentTask.description,\r\n            status: currentTask.status,\r\n            category: currentTask.category\r\n        }).then((response => {\r\n            if (response.data.message === 'succesful') {\r\n                console.log('update succesful');\r\n            } else {\r\n                console.log('update failed');\r\n            }\r\n            handleClose();\r\n        }))\r\n\r\n    };\r\n\r\n    const loadTask = (task) => {\r\n        axios.get(`http://localhost:5500/api/tasks/view/${task}`).then((response => {\r\n            if (response.data) {\r\n                setCurrentTask(response.data)\r\n                console.log(\"Task loaded!!\",response.data);\r\n            } else {\r\n                console.log('failed to load task');\r\n            }\r\n        }))\r\n\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <EditIcon />\r\n            </IconButton>\r\n            <Dialog fullWidth={\"fullWidth\"} maxWidth={\"sm\"} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Update Task</DialogTitle>\r\n                <DialogContent className={classes.dialogForm} >\r\n                    <DialogContentText>\r\n                        Please fill all fields\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"taskName\"\r\n                        label=\"Task Name\"\r\n                        type=\"text\"\r\n                        value={currentTask.taskName}\r\n                        onChange={event => { setCurrentTask({...currentTask, taskName:event.target.value })}}\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"duration\"\r\n                        label=\"Duration\"\r\n                        type=\"number\"\r\n                        value={currentTask.durationMin}\r\n                        onChange={event => { setCurrentTask({...currentTask, durationMin:event.target.value })}}\r\n\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"startTime\"\r\n                        label=\"Start date and time\"\r\n                        type=\"datetime-local\"\r\n                        defaultValue=\"2021-02-23T17:00\"\r\n                        value={currentTask.startTime}\r\n                        onChange={event => { setCurrentTask({...currentTask, startTime:event.target.value })}}\r\n\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"description\"\r\n                        label=\"Description\"\r\n                        type=\"text\"\r\n                        value={currentTask.description}\r\n                        onChange={event => { setCurrentTask({...currentTask, description:event.target.value })}}\r\n\r\n                    />\r\n                    <InputLabel shrink id=\"statusSelectLabel\">\r\n                        Status\r\n                    </InputLabel>\r\n                    <Select\r\n                        labelId=\"statusSelectLabel\"\r\n                        id=\"statusSelect\"\r\n                        value={currentTask.status}\r\n                        onChange={event => { setCurrentTask({...currentTask, status:event.target.value })}}\r\n                    >\r\n                        <MenuItem value={'In progress'}>In progress</MenuItem>\r\n                        <MenuItem value={'New'}>New</MenuItem>\r\n                        <MenuItem value={'Done'}>Done</MenuItem>\r\n                    </Select>\r\n                    <InputLabel shrink id=\"categorySelectLabel\">\r\n                        Category\r\n                    </InputLabel >\r\n                    <Select\r\n                        labelId=\"categorySelectLabel\"\r\n                        id=\"categorySelect\"\r\n                        value={currentTask.category}\r\n                        onChange={event => { setCurrentTask({...currentTask, category:event.target.value })}}\r\n                    >\r\n                        <MenuItem value={'Education'}>Education</MenuItem>\r\n                        <MenuItem value={'Training'}>Training</MenuItem>\r\n                        <MenuItem value={'Meeting'}>Meeting</MenuItem>\r\n                        <MenuItem value={'Home'}>Home</MenuItem>\r\n                        <MenuItem value={'General'}>General</MenuItem>\r\n                    </Select>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleUpdate} color=\"primary\">\r\n                        Update\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":153,"column":8,"nodeType":"116","endLine":153,"endColumn":10,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":28,"column":42,"nodeType":"120","messageId":"121","endLine":28,"endColumn":44},{"ruleId":"118","severity":1,"message":"119","line":32,"column":35,"nodeType":"120","messageId":"121","endLine":32,"endColumn":37},{"ruleId":"118","severity":1,"message":"119","line":44,"column":32,"nodeType":"120","messageId":"121","endLine":44,"endColumn":34},{"ruleId":"114","severity":1,"message":"122","line":56,"column":8,"nodeType":"116","endLine":56,"endColumn":10,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"119","line":24,"column":30,"nodeType":"120","messageId":"121","endLine":24,"endColumn":32},{"ruleId":"114","severity":1,"message":"124","line":32,"column":6,"nodeType":"116","endLine":32,"endColumn":8,"suggestions":"125"},{"ruleId":"114","severity":1,"message":"126","line":48,"column":8,"nodeType":"116","endLine":48,"endColumn":10,"suggestions":"127"},{"ruleId":"118","severity":1,"message":"119","line":26,"column":36,"nodeType":"120","messageId":"121","endLine":26,"endColumn":38},{"ruleId":"114","severity":1,"message":"124","line":34,"column":8,"nodeType":"116","endLine":34,"endColumn":10,"suggestions":"128"},{"ruleId":"118","severity":1,"message":"119","line":26,"column":36,"nodeType":"120","messageId":"121","endLine":26,"endColumn":38},{"ruleId":"114","severity":1,"message":"124","line":34,"column":8,"nodeType":"116","endLine":34,"endColumn":10,"suggestions":"129"},{"ruleId":"114","severity":1,"message":"130","line":197,"column":11,"nodeType":"116","endLine":197,"endColumn":13,"suggestions":"131"},{"ruleId":"118","severity":1,"message":"119","line":85,"column":27,"nodeType":"120","messageId":"121","endLine":85,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":87,"column":47,"nodeType":"134","messageId":"135","endLine":87,"endColumn":49},{"ruleId":"132","severity":1,"message":"136","line":35,"column":28,"nodeType":"134","messageId":"135","endLine":35,"endColumn":30},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["139"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'data', 'getAllTasks', and 'tasks'. Either include them or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["140"],"React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.",["141"],"React Hook useEffect has a missing dependency: 'tasksByCategory'. Either include it or remove the dependency array.",["142"],["143"],["144"],"React Hook useEffect has missing dependencies: 'getAllTasks' and 'tasks.length'. Either include them or remove the dependency array.",["145"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"150","fix":"154"},{"desc":"150","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [history, user]",{"range":"158","text":"159"},"Update the dependencies array to be: [data, getAllTasks, tasks]",{"range":"160","text":"161"},"Update the dependencies array to be: [getStats]",{"range":"162","text":"163"},"Update the dependencies array to be: [tasksByCategory]",{"range":"164","text":"165"},{"range":"166","text":"163"},{"range":"167","text":"163"},"Update the dependencies array to be: [getAllTasks, tasks.length]",{"range":"168","text":"169"},[4886,4888],"[history, user]",[1741,1743],"[data, getAllTasks, tasks]",[731,733],"[getStats]",[1545,1547],"[tasksByCategory]",[887,889],[890,892],[6940,6942],"[getAllTasks, tasks.length]"]