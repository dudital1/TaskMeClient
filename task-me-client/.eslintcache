[{"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/index.js":"1","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Dashboard.js":"2","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/NotificationsConfirmation.js":"3","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/calender.js":"4","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/TasksTable.js":"5","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/HeadTable.js":"6","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/ShareConfirmation.js":"7","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/DeleteConfirmation.js":"8","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/FormAddTask.js":"9","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/FormDialog.js":"10","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/piChart.js":"11","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/Stats.js":"12","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/meanHoursChart.js":"13","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/stackChart.js":"14","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/OverallStats.js":"15","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/login/Signin.js":"16","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/login/Signup.js":"17","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/login/verifyLink.js":"18","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/App.js":"19","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/profile/profile.js":"20","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/profile/ProfileDetails.js":"21","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/aside/listItems.js":"22","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/main.js":"23"},{"size":228,"mtime":1614031789115,"results":"24","hashOfConfig":"25"},{"size":3295,"mtime":1614028370727,"results":"26","hashOfConfig":"25"},{"size":2652,"mtime":1614040961314,"results":"27","hashOfConfig":"25"},{"size":2592,"mtime":1614040961361,"results":"28","hashOfConfig":"25"},{"size":13218,"mtime":1614082349796,"results":"29","hashOfConfig":"25"},{"size":4377,"mtime":1614031269559,"results":"30","hashOfConfig":"25"},{"size":2986,"mtime":1614045439813,"results":"31","hashOfConfig":"25"},{"size":2202,"mtime":1614040961346,"results":"32","hashOfConfig":"25"},{"size":7217,"mtime":1614040961322,"results":"33","hashOfConfig":"25"},{"size":8563,"mtime":1614040961358,"results":"34","hashOfConfig":"25"},{"size":1236,"mtime":1614040961336,"results":"35","hashOfConfig":"25"},{"size":3932,"mtime":1614031781092,"results":"36","hashOfConfig":"25"},{"size":1434,"mtime":1614040961331,"results":"37","hashOfConfig":"25"},{"size":1744,"mtime":1614040961334,"results":"38","hashOfConfig":"25"},{"size":1878,"mtime":1614040961325,"results":"39","hashOfConfig":"25"},{"size":7190,"mtime":1614044108317,"results":"40","hashOfConfig":"25"},{"size":6325,"mtime":1614044012511,"results":"41","hashOfConfig":"25"},{"size":2449,"mtime":1614082238044,"results":"42","hashOfConfig":"25"},{"size":660,"mtime":1614031781096,"results":"43","hashOfConfig":"25"},{"size":1364,"mtime":1614031681582,"results":"44","hashOfConfig":"25"},{"size":1863,"mtime":1614031681575,"results":"45","hashOfConfig":"25"},{"size":1483,"mtime":1614030614104,"results":"46","hashOfConfig":"25"},{"size":8259,"mtime":1614077612404,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"deci66",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/index.js",[],["102","103"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Dashboard.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/NotificationsConfirmation.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/calender.js",["104"],"import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {ViewState} from '@devexpress/dx-react-scheduler';\nimport {\n    Scheduler,\n    WeekView,\n    Appointments,\n    Toolbar,\n    ViewSwitcher,\n    MonthView,\n    DayView,\n    TodayButton,\n    DateNavigator,\n} from '@devexpress/dx-react-scheduler-material-ui';\nimport {useState, useEffect} from 'react';\nimport axios from \"axios\";\n\nconst Calender = ({tmpUser}) => {\n    const [data, setData] = useState([]);\n    const [currentViewName, setCurrentViewName] = useState('work-week');\n    const [tasks, setTasks] = useState([]);\n\n    const getAllTasks = () => {\n        return (\n            axios.post(`https://enigmatic-spire-75482.herokuapp.com/api/tasks/`, {\n                email: tmpUser.email,\n            }).then((response => {\n                response.data.forEach((item) => {\n                    data.push(item);\n                })\n                if (data) {\n                    data.forEach(item => {\n                        let tmpTask = {\n                            title: item.taskName,\n                            startDate: Date.parse(item.startTime),\n                            endDate: Date.parse(item.endTime)\n                        }\n                        tasks.push(tmpTask);\n                        setTasks([...tasks]);\n                    })\n                }\n            })))\n    }\n\n    useEffect(() => {\n        if (data.length === 0) {\n            getAllTasks();\n            setData([...data]);\n            setTasks([...tasks]);\n        }\n    }, []);\n\n    const currentViewNameChange = (currentViewName) => {\n        setCurrentViewName(currentViewName);\n    }\n\n    return (\n        <Paper>\n            <Scheduler\n                data={tasks}\n                height={\"100%\"}\n            >\n                <ViewState\n                    defaultCurrentDate={Date.now()}\n                    currentViewName={currentViewName}\n                    onCurrentViewNameChange={currentViewNameChange}\n                />\n                <Toolbar/>\n                <DateNavigator/>\n                <TodayButton/>\n                <WeekView\n                    name=\"work-week\"\n                    displayName=\"Week\"\n                    startDayHour={6}\n                    endDayHour={24}\n                    cellDuration={60}\n                />\n                <MonthView/>\n                <DayView\n                    cellDuration={60}\n                />\n\n                <ViewSwitcher/>\n                <Appointments/>\n            </Scheduler>\n        </Paper>\n    );\n\n}\n\n\nexport default Calender;\n","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/TasksTable.js",["105"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/HeadTable.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/ShareConfirmation.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/DeleteConfirmation.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/FormAddTask.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/FormDialog.js",[],["106","107"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/piChart.js",["108"],"import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    Chart,\n    PieSeries,\n    Title,\n    Legend,\n    Tooltip,\n\n\n} from '@devexpress/dx-react-chart-material-ui';\nimport {EventTracker, Animation} from '@devexpress/dx-react-chart';\nimport {useEffect, useState} from 'react';\nimport axios from 'axios';\n\nconst PieChart = ({tmpUser}) => {\n    const [data, setData] = useState([]);\n\n    function getStats() {\n        axios.post('https://enigmatic-spire-75482.herokuapp.com/api/tasks/stats', {\n            email: tmpUser.email,\n        }).then((response => {\n            setData(response.data);\n        }))\n    }\n\n    useEffect(() => {\n        getStats();\n    }, []);\n\n    return (\n        <Paper>\n            <Chart\n                data={data ? data : []}\n            >\n                <PieSeries\n                    valueField=\"all\"\n                    argumentField=\"name\"\n                />\n\n                <Title\n                    text=\"Tasks by category\"\n\n                />\n                <Legend position=\"bottom\"/>\n                <EventTracker/>\n                <Tooltip/>\n                <Animation duration={3000}/>\n            </Chart>\n        </Paper>\n    );\n}\n\n\nexport default PieChart;","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/Stats.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/meanHoursChart.js",["109"],"import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    Chart,\n    Title,\n    Legend,\n    Tooltip,\n    ArgumentAxis,\n    ValueAxis,\n    BarSeries,\n\n} from '@devexpress/dx-react-chart-material-ui';\nimport {Stack} from '@devexpress/dx-react-chart';\nimport {EventTracker, Animation} from '@devexpress/dx-react-chart';\nimport {useEffect, useState} from 'react';\nimport axios from 'axios';\n\nconst MeanHoursChart = ({tmpUser}) => {\n    const [data, setData] = useState([]);\n\n    function getStats() {\n        axios.post('https://enigmatic-spire-75482.herokuapp.com/api/tasks/stats', {\n            email: tmpUser.email,\n        }).then((response => {\n            setData(response.data);\n        }))\n    }\n\n    useEffect(() => {\n        getStats();\n    }, []);\n\n    return (\n        <Paper>\n            <Chart\n                data={data ? data : []}\n            >\n                <Title\n                    text=\"Duration By Category\"\n\n                />\n                <ArgumentAxis/>\n                <ValueAxis/>\n\n                <BarSeries\n                    valueField=\"mean\"\n                    argumentField=\"name\"\n                    name=\"Done\"\n                />\n                <Stack/>\n                <Legend/>\n                <EventTracker/>\n                <Tooltip/>\n                <Animation duration={3000}/>\n            </Chart>\n        </Paper>\n    );\n}\n\n\nexport default MeanHoursChart;","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/stackChart.js",["110"],"import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    Chart,\n    Title,\n    Legend,\n    Tooltip,\n    ArgumentAxis,\n    ValueAxis,\n    BarSeries,\n\n} from '@devexpress/dx-react-chart-material-ui';\nimport {Stack} from '@devexpress/dx-react-chart';\nimport {EventTracker, Animation} from '@devexpress/dx-react-chart';\nimport {useEffect, useState} from 'react';\nimport axios from 'axios';\n\nconst StackChart = ({tmpUser}) => {\n    const [data, setData] = useState([]);\n\n    function getStats() {\n        axios.post('https://enigmatic-spire-75482.herokuapp.com/api/tasks/stats', {\n            email: tmpUser.email,\n        }).then((response => {\n            setData(response.data);\n        }))\n    }\n\n    useEffect(() => {\n        getStats();\n    }, []);\n\n    return (\n        <Paper>\n            <Chart\n                data={data ? data : []}\n            >\n                <Title\n                    text=\"Tasks status\"\n\n                />\n                <ArgumentAxis/>\n                <ValueAxis/>\n\n                <BarSeries\n                    valueField=\"done\"\n                    argumentField=\"name\"\n                    name=\"Done\"\n                />\n                <BarSeries\n                    valueField=\"In progress\"\n                    argumentField=\"name\"\n                    name=\"In progress\"\n                />\n                <BarSeries\n                    valueField=\"New\"\n                    argumentField=\"name\"\n                    name=\"New\"\n                />\n                <Stack/>\n                <Legend/>\n                <EventTracker/>\n                <Tooltip/>\n                <Animation duration={3000}/>\n            </Chart>\n        </Paper>\n    );\n}\n\n\nexport default StackChart;","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/stats/OverallStats.js",["111"],"import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport axios from \"axios\";\nimport {useEffect, useState} from 'react';\n\nconst useStyles = makeStyles({\n    fragment: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        margin: \"auto\"\n    },\n    depositContext: {\n        flex: 1,\n    },\n});\n\nexport default function OverallStats({tmpUser, category}) {\n\n    const classes = useStyles();\n    const user = (tmpUser);\n    const [categoryLength, setCategoryLength] = useState([]);\n    const [completedNumber, setCompletedNumber] = useState(null);\n\n    const tasksByCategory = () => {\n        let call = `https://enigmatic-spire-75482.herokuapp.com/api/tasks/?category=${category}`\n        if (category === \"All\")\n            call = \"https://enigmatic-spire-75482.herokuapp.com/api/tasks/\"\n        return (\n            axios.post(`${call}`, {\n                email: user.email,\n            }).then((response => {\n                setCategoryLength(response.data.length)\n                setCompletedNumber(response.data.filter(task => task.status === \"Done\").length)\n            })))\n    }\n    useEffect(() => {\n        tasksByCategory();\n    }, []);\n\n    return (\n        <React.Fragment>\n            <div className={classes.fragment}>\n                <Typography component=\"p\" variant=\"h4\">\n                    {category}\n                </Typography>\n                <Typography\n                    variant=\"h5\">{completedNumber ? completedNumber : \"0\"}/{categoryLength ? categoryLength : \"0\"}</Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" className={classes.depositContext}>\n                    Completed\n                </Typography>\n            </div>\n        </React.Fragment>\n    );\n}","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/login/Signin.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/login/Signup.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/login/verifyLink.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/App.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/profile/profile.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/profile/ProfileDetails.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/aside/listItems.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/main.js",["112"],"import React, {useEffect, useState} from 'react';\nimport clsx from 'clsx';\nimport {ThemeProvider, createMuiTheme, makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Switch from '@material-ui/core/Switch';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport MainListItems from './aside/listItems';\nimport axios from \"axios\";\nimport {useHistory} from \"react-router-dom\";\nimport Dashboard from './dashboard/Dashboard';\nimport Box from \"@material-ui/core/Box\";\nimport Profile from './profile/profile';\nimport Stats from './stats/Stats';\nimport NotificationsConfirmation from \"./dashboard/NotificationsConfirmation\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright ©️ '}\n            <Link color=\"inherit\" href=\"#\">\n                TaskMe - David and Saar Ltd\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24,\n    },\n\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\nconst Main = () => {\n\n    let history = useHistory();\n    const user = JSON.parse(localStorage.getItem(\"storageUser\"));\n    const [content, setContent] = useState(\"dashboard\")\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const [shared, setShared] = useState(0)\n    const [sharedUser, setSharedUser] = useState(0)\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    }\n\n    useEffect(() => {\n        axios.get(\"https://enigmatic-spire-75482.herokuapp.com/auth/sign-in\").then((response) => {\n            if (response.data.loggedIn === false) {\n                localStorage.clear();\n                history.push('/');\n            }\n        })\n        getSharedTasks()\n    }, []);\n\n    function logout() {\n        axios.get('https://enigmatic-spire-75482.herokuapp.com/auth/logout').then(() => {\n            localStorage.clear();\n            history.push('/');\n        })\n    }\n\n    function updateContent(tmpContent) {\n        setContent(tmpContent)\n    }\n\n    function switchContent() {\n        if (content === \"dashboard\")\n            return <Dashboard/>\n        if (content === \"profile\")\n            return <Profile/>\n        if (content === \"Stats\")\n            return <Stats/>\n    }\n\n    function getSharedTasks() {\n        axios.post(`https://enigmatic-spire-75482.herokuapp.com/api/tasks/is-any-shared`, {\n            userEmail: user.email\n        }).then((response => {\n            setShared(response.data.length);\n            setSharedUser(response.data.email)\n        }))\n    }\n\n    const [darkMode, setDarkMode] = useState(false)\n\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                main: '#009688',\n                contrastText: '#fff',\n            },\n            secondary: {\n                main: '#00695C',\n                contrastText: '#000',\n            },\n            type: darkMode ? \"dark\" : \"light\",\n        },\n    });\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className={classes.root}>\n                <CssBaseline/>\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                    <Toolbar className={classes.toolbar}>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            onClick={handleDrawerOpen}\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n                        >\n                            <MenuIcon/>\n                        </IconButton>\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                            {user ? user.name.toUpperCase() : \"\"}\n                        </Typography>\n                        Dark Mode\n                        <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)}></Switch>\n                        <Box mr={3}>\n                            <NotificationsConfirmation shared={shared} sourceUser={sharedUser} email={user.email}\n                                                       setShared={setShared}/>\n                        </Box>\n                        <Avatar alt=\"Remy Sharp\" src={user.picture}/>\n                        <IconButton color=\"inherit\">\n                            <Badge color=\"secondary\">\n                                <ExitToAppIcon onClick={logout}/>\n                            </Badge>\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <Drawer\n                    variant=\"permanent\"\n                    classes={{\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n                    }}\n                    open={open}\n                >\n                    <div className={classes.toolbarIcon}>\n                        <IconButton onClick={handleDrawerClose}>\n                            <ChevronLeftIcon/>\n                        </IconButton>\n                    </div>\n                    <Divider/>\n                    <MainListItems setContent={updateContent}/>\n                    <Divider/>\n                </Drawer>\n                {switchContent()}\n            </div>\n            <Box pt={4}>\n                <Copyright/>\n            </Box>\n        </ThemeProvider>\n    );\n};\nexport default Main;",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":51,"column":8,"nodeType":"119","endLine":51,"endColumn":10,"suggestions":"120"},{"ruleId":"117","severity":1,"message":"121","line":196,"column":8,"nodeType":"119","endLine":196,"endColumn":23,"suggestions":"122"},{"ruleId":"113","replacedBy":"123"},{"ruleId":"115","replacedBy":"124"},{"ruleId":"117","severity":1,"message":"125","line":29,"column":8,"nodeType":"119","endLine":29,"endColumn":10,"suggestions":"126"},{"ruleId":"117","severity":1,"message":"125","line":31,"column":8,"nodeType":"119","endLine":31,"endColumn":10,"suggestions":"127"},{"ruleId":"117","severity":1,"message":"125","line":31,"column":8,"nodeType":"119","endLine":31,"endColumn":10,"suggestions":"128"},{"ruleId":"117","severity":1,"message":"129","line":41,"column":8,"nodeType":"119","endLine":41,"endColumn":10,"suggestions":"130"},{"ruleId":"117","severity":1,"message":"131","line":146,"column":8,"nodeType":"119","endLine":146,"endColumn":10,"suggestions":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data', 'getAllTasks', and 'tasks'. Either include them or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.","ArrayExpression",["135"],"React Hook useEffect has missing dependencies: 'getAllTasks' and 'tasks.length'. Either include them or remove the dependency array.",["136"],["133"],["134"],"React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.",["137"],["138"],["139"],"React Hook useEffect has a missing dependency: 'tasksByCategory'. Either include it or remove the dependency array.",["140"],"React Hook useEffect has missing dependencies: 'getSharedTasks' and 'history'. Either include them or remove the dependency array.",["141"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"146","fix":"148"},{"desc":"146","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [data, getAllTasks, tasks]",{"range":"154","text":"155"},"Update the dependencies array to be: [getAllTasks, refreshSwitch, tasks.length]",{"range":"156","text":"157"},"Update the dependencies array to be: [getStats]",{"range":"158","text":"159"},{"range":"160","text":"159"},{"range":"161","text":"159"},"Update the dependencies array to be: [tasksByCategory]",{"range":"162","text":"163"},"Update the dependencies array to be: [getSharedTasks, history]",{"range":"164","text":"165"},[1552,1554],"[data, getAllTasks, tasks]",[6757,6772],"[getAllTasks, refreshSwitch, tasks.length]",[694,696],"[getStats]",[782,784],[778,780],[1302,1304],"[tasksByCategory]",[4507,4509],"[getSharedTasks, history]"]