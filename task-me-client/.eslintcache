[{"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/index.js":"1","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/App.js":"2","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/verifyLink.js":"3","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signin.js":"4","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signup.js":"5","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/main.js":"6","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/listItems.js":"7","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Dashboard.js":"8","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/OverallStats.js":"9","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Chart.js":"10","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Title.js":"11","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TasksTable.js":"12"},{"size":230,"mtime":1611855188217,"results":"13","hashOfConfig":"14"},{"size":602,"mtime":1612171877221,"results":"15","hashOfConfig":"14"},{"size":801,"mtime":1612171877228,"results":"16","hashOfConfig":"14"},{"size":6097,"mtime":1612197607757,"results":"17","hashOfConfig":"14"},{"size":5117,"mtime":1612197668765,"results":"18","hashOfConfig":"14"},{"size":7158,"mtime":1612198425312,"results":"19","hashOfConfig":"14"},{"size":2053,"mtime":1612171877227,"results":"20","hashOfConfig":"14"},{"size":5129,"mtime":1612198391204,"results":"21","hashOfConfig":"14"},{"size":1853,"mtime":1612199561760,"results":"22","hashOfConfig":"14"},{"size":1714,"mtime":1611700120960,"results":"23","hashOfConfig":"14"},{"size":362,"mtime":1611700314366,"results":"24","hashOfConfig":"14"},{"size":13435,"mtime":1612198201456,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ag6pq",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/index.js",[],["53","54"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/App.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/verifyLink.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signin.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signup.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/main.js",["55","56","57","58","59","60"],"import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport {ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Switch from '@material-ui/core/Switch';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport { mainListItems, secondaryListItems } from './listItems';\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    BrowserRouter as Router,\n    Route , Switch as Sw,\n} from \"react-router-dom\";\nimport Dashboard from './Dashboard';\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href=\"#\">\n                TaskMe - David and Saar Ltd\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\nconst Main = () => {\n\n    let history = useHistory();\n    const user = JSON.parse(localStorage.getItem(\"storageUser\"));\n    const [tasks, setTasks] = useState([]);\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    }\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n    useEffect(() => {\n        axios.get(\"http://localhost:5500/auth/sign-in\").then((response) => {\n            if (response.data.loggedIn === false) {\n                localStorage.clear();\n                history.push('/');\n            }\n            console.log(user)\n\n        }\n    )}, []);\n\n    function logout() {\n        axios.get('http://localhost:5500/auth/logout').then(() => {\n            localStorage.clear();\n            history.push('/');\n        })\n    }\n    const [darkMode,setDarkMode] = useState(false)\n    const theme = createMuiTheme({\n        palette:{\n            type: darkMode? \"dark\":\"light\",\n        },\n    });\n\n    return (\n        <ThemeProvider theme={theme}>\n        \n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                        {user ? user.name.toUpperCase() : \"\"}\n                    </Typography>\n                    Dark Mode\n                    <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)}></Switch>\n                    <Avatar alt=\"Remy Sharp\" src={user.picture} />\n\n                    <IconButton color=\"inherit\">\n                        <Badge color=\"secondary\" >\n                            <ExitToAppIcon onClick={logout} />\n                        </Badge>\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                classes={{\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n                }}\n                open={open}\n            >\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>{mainListItems}</List>\n                <Divider />\n                <List>{secondaryListItems}</List>\n            </Drawer>\n            <Sw>\n                <Route>\n                    <Dashboard path='/main/dashboard'/>\n                </Route>\n            </Sw>\n        </div>\n            <Box pt={4}>\n                <Copyright />\n            </Box>\n        </ThemeProvider>\n\n    );\n};\nexport default Main;\n\n","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/listItems.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Dashboard.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/OverallStats.js",["61"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Chart.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Title.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TasksTable.js",["62"],"import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport axios from \"axios\";\nimport {Box} from \"@material-ui/core\";\n\nfunction createData(name, status, category, start, duration, id) {\n    return { name, status, category, start, duration, id };\n}\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    { id: 'name', numeric: false, disablePadding: true, label: 'Task Name' },\n    { id: 'status', numeric: true, disablePadding: false, label: 'Status' },\n    { id: 'category', numeric: true, disablePadding: false, label: 'Category' },\n    { id: 'start', numeric: true, disablePadding: false, label: 'Start' },\n    { id: 'duration', numeric: true, disablePadding: false, label: 'Duration' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    All Tasks\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                    <IconButton aria-label=\"filter list\">\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function EnhancedTable({tmpUser}) {\n\n    const [tasks, setTasks] = useState([])\n    const [rows, setTmpRows] = useState([])\n\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('category');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const getAllTasks = () => {\n        return(\n            axios.post(`http://localhost:5500/api/tasks/`, {\n                email: tmpUser.email,\n            }).then((response => {\n                setTasks(response.data)\n            })))\n    }\n\n    function createRows(){\n        if (tasks.length>0) {\n            let tmpArr = []\n            tasks.map(task => (\n                tmpArr.push(createData(task.taskName, task.status, task.category,task.startTime, task.durationMin,task._id))\n            ))\n            setTmpRows([...tmpArr])\n            console.log(\"tmp\", rows)\n        }\n    }\n\n    useEffect(() => {\n        if (tasks.length===0){\n            console.log(tasks.length)\n            getAllTasks();\n        }\n        },[]);\n\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.name);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    return (\n        <div className={classes.root}>\n\n\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        {rows.length>0?<TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.name);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) => handleClick(event, row.name)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.name}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    value={row.id}\n                                                    checked={isItemSelected}\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                />\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                {row.name}\n                                            </TableCell>\n                                            <TableCell align=\"left\">{row.status}</TableCell>\n                                            <TableCell align=\"left\">{row.category}</TableCell>\n                                            <TableCell align=\"left\">{row.start}</TableCell>\n                                            <TableCell align=\"left\">{row.duration}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (53) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>:createRows()}\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":24,"column":22,"nodeType":"69","messageId":"70","endLine":24,"endColumn":28},{"ruleId":"67","severity":1,"message":"71","line":29,"column":8,"nodeType":"69","messageId":"70","endLine":29,"endColumn":17},{"ruleId":"67","severity":1,"message":"72","line":128,"column":12,"nodeType":"69","messageId":"70","endLine":128,"endColumn":17},{"ruleId":"67","severity":1,"message":"73","line":128,"column":19,"nodeType":"69","messageId":"70","endLine":128,"endColumn":27},{"ruleId":"67","severity":1,"message":"74","line":138,"column":11,"nodeType":"69","messageId":"70","endLine":138,"endColumn":27},{"ruleId":"75","severity":1,"message":"76","line":149,"column":9,"nodeType":"77","endLine":149,"endColumn":11,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":42,"column":8,"nodeType":"77","endLine":42,"endColumn":10,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"81","line":237,"column":11,"nodeType":"77","endLine":237,"endColumn":13,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'tasks' is assigned a value but never used.","'setTasks' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["85"],"React Hook useEffect has a missing dependency: 'tasksByCategory'. Either include it or remove the dependency array.",["86"],"React Hook useEffect has missing dependencies: 'getAllTasks' and 'tasks.length'. Either include them or remove the dependency array.",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [history, user]",{"range":"94","text":"95"},"Update the dependencies array to be: [tasksByCategory]",{"range":"96","text":"97"},"Update the dependencies array to be: [getAllTasks, tasks.length]",{"range":"98","text":"99"},[4539,4541],"[history, user]",[1357,1359],"[tasksByCategory]",[7985,7987],"[getAllTasks, tasks.length]"]