[{"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/index.js":"1","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/App.js":"2","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signup.js":"3","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/verifyLink.js":"4","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signin.js":"5","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/main.js":"6","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Dashboard.js":"7","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/listItems.js":"8","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/profile.js":"9","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Chart.js":"10","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/OverallStats.js":"11","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/ProfileDetails.js":"12","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Title.js":"13","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/TasksTable.js":"14","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/HeadTable.js":"15"},{"size":230,"mtime":1611855188217,"results":"16","hashOfConfig":"17"},{"size":602,"mtime":1612171877221,"results":"18","hashOfConfig":"17"},{"size":5117,"mtime":1612197668765,"results":"19","hashOfConfig":"17"},{"size":801,"mtime":1612171877228,"results":"20","hashOfConfig":"17"},{"size":6098,"mtime":1612209999670,"results":"21","hashOfConfig":"17"},{"size":7627,"mtime":1612215326390,"results":"22","hashOfConfig":"17"},{"size":5142,"mtime":1612217506403,"results":"23","hashOfConfig":"17"},{"size":2286,"mtime":1612215173948,"results":"24","hashOfConfig":"17"},{"size":1456,"mtime":1612209999672,"results":"25","hashOfConfig":"17"},{"size":1714,"mtime":1611700120960,"results":"26","hashOfConfig":"17"},{"size":1853,"mtime":1612199561760,"results":"27","hashOfConfig":"17"},{"size":1792,"mtime":1612209999671,"results":"28","hashOfConfig":"17"},{"size":362,"mtime":1611700314366,"results":"29","hashOfConfig":"17"},{"size":12856,"mtime":1612220990259,"results":"30","hashOfConfig":"17"},{"size":4266,"mtime":1612219644494,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"ag6pq",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/index.js",[],["66","67"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/App.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signup.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/verifyLink.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/Signin.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/main.js",["68","69","70","71","72","73","74","75"],"import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Switch from '@material-ui/core/Switch';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n// import { mainListItems, secondaryListItems } from './listItems';\nimport MainListItems from './listItems';\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    BrowserRouter as Router,\n    Route, Switch as Sw,\n} from \"react-router-dom\";\nimport Dashboard from './Dashboard';\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport Profile from './profile';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href=\"#\">\n                TaskMe - David and Saar Ltd\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\nconst Main = () => {\n\n    let history = useHistory();\n    const user = JSON.parse(localStorage.getItem(\"storageUser\"));\n    const [tasks, setTasks] = useState([]);\n    const [content , setContent] = useState(\"dashboard\")\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    }\n    // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n    useEffect(() => {\n        axios.get(\"http://localhost:5500/auth/sign-in\").then((response) => {\n            if (response.data.loggedIn === false) {\n                localStorage.clear();\n                history.push('/');\n            }\n            console.log(user)\n\n        }\n        )\n    }, []);\n\n    function logout() {\n        axios.get('http://localhost:5500/auth/logout').then(() => {\n            localStorage.clear();\n            history.push('/');\n        })\n    }\n    function updateContent(tmpContent){\n        setContent(tmpContent)\n    }\n    function switchContent(){\n        if(content===\"dashboard\")\n            return <Dashboard />\n        if (content===\"profile\")\n            return <Profile />\n    }\n\n\n    const [darkMode, setDarkMode] = useState(false)\n    const theme = createMuiTheme({\n        palette: {\n            type: darkMode ? \"dark\" : \"light\",\n        },\n    });\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className={classes.root}>\n                <CssBaseline />\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n                    <Toolbar className={classes.toolbar}>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            onClick={handleDrawerOpen}\n                            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                            {user ? user.name.toUpperCase() : \"\"}\n                        </Typography>\n                    Dark Mode\n                    <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)}></Switch>\n                        <Avatar alt=\"Remy Sharp\" src={user.picture} />\n\n                        <IconButton color=\"inherit\">\n                            <Badge color=\"secondary\" >\n                                <ExitToAppIcon onClick={logout} />\n                            </Badge>\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <Drawer\n                    variant=\"permanent\"\n                    classes={{\n                        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n                    }}\n                    open={open}\n                >\n                    <div className={classes.toolbarIcon}>\n                        <IconButton onClick={handleDrawerClose}>\n                            <ChevronLeftIcon />\n                        </IconButton>\n                    </div>\n                    <Divider />\n                    <MainListItems setContent={updateContent}/>\n                    <Divider />\n                    {/*<List>{secondaryListItems}</List>*/}\n                </Drawer>\n                {switchContent()}\n            </div>\n            <Box pt={4}>\n                <Copyright />\n            </Box>\n        </ThemeProvider>\n    );\n};\nexport default Main;\n\n","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Dashboard.js",["76","77","78"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/listItems.js",["79"],"import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from \"@material-ui/core/Drawer\";\n\n\nconst MainListItems =({setContent}) => {\n\n    return(\n        <div>\n            <ListItem button onClick={()=>{\n                setContent(\"dashboard\")\n            }}>\n                <ListItemIcon>\n                    <DashboardIcon>\n                    </DashboardIcon>\n                </ListItemIcon>\n                <ListItemText primary=\"Dashboard\" />\n            </ListItem>\n            <ListItem button onClick={()=>{\n                setContent(\"profile\")\n            }}>\n                <ListItemIcon>\n                    <PeopleIcon>\n                    </PeopleIcon>\n                </ListItemIcon>\n                <ListItemText primary=\"Profile\" />\n            </ListItem>\n            <ListItem button>\n                <ListItemIcon>\n                    <BarChartIcon >\n                    </BarChartIcon>\n                </ListItemIcon>\n                <ListItemText primary=\"Reports\" />\n            </ListItem>\n\n            <Divider />\n\n            <ListSubheader inset>Saved reports</ListSubheader>\n            <ListItem button>\n                <ListItemIcon>\n                    <AssignmentIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Current month\" />\n            </ListItem>\n            <ListItem button>\n                <ListItemIcon>\n                    <AssignmentIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Last quarter\" />\n            </ListItem>\n            <ListItem button>\n                <ListItemIcon>\n                    <AssignmentIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Year-end sale\" />\n            </ListItem>\n        </div>\n    );\n}\nexport default MainListItems;\n","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/profile.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Chart.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/OverallStats.js",["80"],"import React from 'react';\n// import Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Title from './Title';\nimport axios from \"axios\";\n// import { useHistory } from \"react-router-dom\";\nimport {useEffect, useState} from 'react';\n\n// function preventDefault(event) {\n//     event.preventDefault();\n// }\nconst useStyles = makeStyles({\n    depositContext: {\n        flex: 1,\n    },\n});\n\nexport default function OverallStats({tmpUser, category}) {\n\n    const classes = useStyles();\n    const user = (tmpUser);\n    // const [allTasks , setAllTasks ] = useState([]);\n    const [categoryLength , setCategoryLength ] = useState([]);\n    const [completedNumber , setCompletedNumber ] = useState(null);\n\n    const tasksByCategory = () => {\n        let call=`http://localhost:5500/api/tasks/?category=${category}`\n        if (category===\"All\")\n            call=\"http://localhost:5500/api/tasks/\"\n        return(\n        axios.post(`${call}`, {\n            email: user.email,\n        }).then((response => {\n            // setAllTasks(response.data)\n            setCategoryLength(response.data.length)\n            setCompletedNumber(response.data.filter(task => task.status===\"Done\").length)\n        })))\n    }\n    useEffect(() => {\n        tasksByCategory();\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Typography component=\"p\" variant=\"h4\">\n                {category}\n            </Typography>\n            <Title>{completedNumber?completedNumber:\"0\"}/{categoryLength?categoryLength:\"0\"}</Title>\n            <Typography component=\"p\" variant=\"h4\">\n            </Typography>\n            <Typography color=\"textSecondary\" className={classes.depositContext}>\n                Completed\n            </Typography>\n        </React.Fragment>\n    );\n}","/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/ProfileDetails.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/Title.js",[],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/TasksTable.js",["81","82"],"/Users/saarp/Desktop/Shenkar/DCS/TaskMeClient/task-me-client/src/components/dashboard/TableOfTasks/HeadTable.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":10,"column":8,"nodeType":"89","messageId":"90","endLine":10,"endColumn":12},{"ruleId":"87","severity":1,"message":"91","line":25,"column":22,"nodeType":"89","messageId":"90","endLine":25,"endColumn":28},{"ruleId":"87","severity":1,"message":"92","line":26,"column":5,"nodeType":"89","messageId":"90","endLine":26,"endColumn":10},{"ruleId":"87","severity":1,"message":"93","line":26,"column":22,"nodeType":"89","messageId":"90","endLine":26,"endColumn":24},{"ruleId":"87","severity":1,"message":"94","line":30,"column":8,"nodeType":"89","messageId":"90","endLine":30,"endColumn":17},{"ruleId":"87","severity":1,"message":"95","line":130,"column":12,"nodeType":"89","messageId":"90","endLine":130,"endColumn":17},{"ruleId":"87","severity":1,"message":"96","line":130,"column":19,"nodeType":"89","messageId":"90","endLine":130,"endColumn":27},{"ruleId":"97","severity":1,"message":"98","line":152,"column":8,"nodeType":"99","endLine":152,"endColumn":10,"suggestions":"100"},{"ruleId":"87","severity":1,"message":"101","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":11},{"ruleId":"87","severity":1,"message":"102","line":5,"column":8,"nodeType":"89","messageId":"90","endLine":5,"endColumn":18},{"ruleId":"87","severity":1,"message":"103","line":9,"column":8,"nodeType":"89","messageId":"90","endLine":9,"endColumn":12},{"ruleId":"87","severity":1,"message":"104","line":11,"column":8,"nodeType":"89","messageId":"90","endLine":11,"endColumn":14},{"ruleId":"97","severity":1,"message":"105","line":42,"column":8,"nodeType":"99","endLine":42,"endColumn":10,"suggestions":"106"},{"ruleId":"87","severity":1,"message":"107","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":17},{"ruleId":"97","severity":1,"message":"108","line":196,"column":11,"nodeType":"99","endLine":196,"endColumn":13,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Route' is defined but never used.","'Sw' is defined but never used.","'Container' is defined but never used.","'tasks' is assigned a value but never used.","'setTasks' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["112"],"'Box' is defined but never used.","'Typography' is defined but never used.","'Link' is defined but never used.","'Drawer' is defined but never used.","React Hook useEffect has a missing dependency: 'tasksByCategory'. Either include it or remove the dependency array.",["113"],"'lighten' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllTasks' and 'tasks.length'. Either include them or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [history, user]",{"range":"121","text":"122"},"Update the dependencies array to be: [tasksByCategory]",{"range":"123","text":"124"},"Update the dependencies array to be: [getAllTasks, tasks.length]",{"range":"125","text":"126"},[4684,4686],"[history, user]",[1357,1359],"[tasksByCategory]",[6710,6712],"[getAllTasks, tasks.length]"]