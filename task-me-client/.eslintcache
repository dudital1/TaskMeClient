[{"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\index.js":"1","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\App.js":"2","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signin.js":"3","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signup.js":"4","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\verifyLink.js":"5","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\main.js":"6","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\profile.js":"7","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Stats.js":"8","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\listItems.js":"9","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Dashboard.js":"10","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\NotificationsConfirmation.js":"11","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\piChart.js":"12","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\OverallStats.js":"13","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\stackChart.js":"14","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\meanHoursChart.js":"15","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\ProfileDetails.js":"16","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\calender.js":"17","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\TasksTable.js":"18","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\HeadTable.js":"19","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\ShareConfirmation.js":"20","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\DeleteConfirmation.js":"21","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormAddTask.js":"22","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormDialog.js":"23"},{"size":241,"mtime":1612126866112,"results":"24","hashOfConfig":"25"},{"size":624,"mtime":1612162685890,"results":"26","hashOfConfig":"25"},{"size":6276,"mtime":1612208990191,"results":"27","hashOfConfig":"25"},{"size":5268,"mtime":1612199318918,"results":"28","hashOfConfig":"25"},{"size":827,"mtime":1612162853982,"results":"29","hashOfConfig":"25"},{"size":9116,"mtime":1614014379958,"results":"30","hashOfConfig":"25"},{"size":1559,"mtime":1612870303442,"results":"31","hashOfConfig":"25"},{"size":4134,"mtime":1612999844624,"results":"32","hashOfConfig":"25"},{"size":1701,"mtime":1614010348241,"results":"33","hashOfConfig":"25"},{"size":3581,"mtime":1614010348233,"results":"34","hashOfConfig":"25"},{"size":2929,"mtime":1614010348234,"results":"35","hashOfConfig":"25"},{"size":1168,"mtime":1612999932268,"results":"36","hashOfConfig":"25"},{"size":2082,"mtime":1612999941627,"results":"37","hashOfConfig":"25"},{"size":1899,"mtime":1612999921338,"results":"38","hashOfConfig":"25"},{"size":1578,"mtime":1613000033752,"results":"39","hashOfConfig":"25"},{"size":1848,"mtime":1612206704819,"results":"40","hashOfConfig":"25"},{"size":2829,"mtime":1612870514660,"results":"41","hashOfConfig":"25"},{"size":13547,"mtime":1614010348240,"results":"42","hashOfConfig":"25"},{"size":4731,"mtime":1614010348238,"results":"43","hashOfConfig":"25"},{"size":2953,"mtime":1614010348239,"results":"44","hashOfConfig":"25"},{"size":2649,"mtime":1614010348235,"results":"45","hashOfConfig":"25"},{"size":6401,"mtime":1614010348236,"results":"46","hashOfConfig":"25"},{"size":7929,"mtime":1614010348237,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1byuelv",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"85"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"85"},"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\index.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\App.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signin.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\Signup.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\verifyLink.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\main.js",["100","101","102","103","104","105","106"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\profile.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Stats.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\listItems.js",["107","108"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\Dashboard.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\NotificationsConfirmation.js",["109","110","111","112","113"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\piChart.js",["114","115"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\OverallStats.js",["116"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\stackChart.js",["117","118"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\meanHoursChart.js",["119","120"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\ProfileDetails.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\calender.js",["121","122","123","124"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\TasksTable.js",["125"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import clsx from 'clsx';\r\nimport { makeStyles,fade } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport EnhancedTableToolbar from './HeadTable';\r\n// import FormDialog from \"./FormDialog\";\r\n\r\nimport axios from \"axios\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nfunction createData(name, status, category, start, duration, id) {\r\n    return { name, status, category, start, duration, id };\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\nconst headCells = [\r\n    { id: 'name', numeric: false, disablePadding: true, label: 'Task Name' },\r\n    { id: 'status', numeric: true, disablePadding: false, label: 'Status' },\r\n    { id: 'category', numeric: true, disablePadding: false, label: 'Category' },\r\n    { id: 'start', numeric: true, disablePadding: false, label: 'Start' },\r\n    { id: 'duration', numeric: true, disablePadding: false, label: 'Duration' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            <Box fontWeight=\"fontWeightBold\">{headCell.label}</Box>\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n    }\r\n}));\r\n\r\nexport default function TaskTable({tmpUser}) {\r\n\r\n    const [tasks, setTasks] = useState([])\r\n    const [refreshSwitch , setRefreshSwitch] = useState(1)\r\n    const [rows, setTmpRows] = useState([])\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('category');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const getAllTasks = () => {\r\n        return(\r\n            axios.post(`http://localhost:5500/api/tasks/`, {\r\n                email: tmpUser.email,\r\n            }).then((response => {\r\n                setTasks(response.data)\r\n            })))\r\n    }\r\n    const getTasksSearch = (serchWord) => {\r\n        return(\r\n            axios.post(`http://localhost:5500/api/tasks/search/`, {\r\n                email: tmpUser.email,\r\n                searchBy:serchWord,\r\n            }).then((response => {\r\n                setTasks(response.data)\r\n            })))\r\n    }\r\n\r\n    function createRows(){\r\n        if (tasks.length>0 && rows.length<1) {\r\n            let tmpArr = []\r\n            tasks.map(task => (\r\n                tmpArr.push(createData(task.taskName, task.status, task.category,task.startTime, task.durationMin,task._id))\r\n            ))\r\n            setTmpRows([...tmpArr])\r\n            console.log(\"tmp\", rows)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (tasks.length===0){\r\n            console.log(tasks.length)\r\n            getAllTasks();\r\n        }\r\n        },[refreshSwitch]);\r\n\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.id);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleRefresh = () => {\r\n        console.log(\"regeffewfe\")\r\n        setSelected([])\r\n        setTasks([])\r\n        setTmpRows([])\r\n        setRefreshSwitch(!refreshSwitch)\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    const isSelected = (id) => selected.indexOf(id) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    function searchTasks(searchWord){\r\n        let tmpArr = []\r\n        if(searchWord.length>1) {\r\n            getTasksSearch(searchWord).then(\r\n                tasks.map(task => (\r\n                    tmpArr.push(createData(task.taskName, task.status, task.category, task.startTime, task.durationMin, task._id))\r\n                )),\r\n                setTmpRows([...tmpArr]));\r\n        }\r\n        else {\r\n            getAllTasks().then(\r\n                tasks.map(task => (\r\n                    tmpArr.push(createData(task.taskName, task.status, task.category, task.startTime, task.durationMin, task._id))\r\n                )),\r\n                setTmpRows([...tmpArr]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar selected={selected}  numSelected={selected.length} search={searchTasks} email={tmpUser.email} refresh={handleRefresh} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        {rows.length>0?<TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.id);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row.id)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.id}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    value={row.id}\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.name}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{row.status}</TableCell>\r\n                                            <TableCell align=\"left\">{row.category}</TableCell>\r\n                                            <TableCell align=\"left\">{row.start}</TableCell>\r\n                                            <TableCell align=\"left\">{row.duration}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>:createRows()}\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}",["126","127"],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\HeadTable.js",["128"],"import {fade, lighten, makeStyles} from \"@material-ui/core/styles\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport clsx from \"clsx\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport FormDialog from \"./FormDialog\";\r\nimport FormAddTask from \"./FormAddTask\";\r\nimport DeleteConfirmation from \"./DeleteConfirmation\"\r\nimport ShareConfirmation from \"./ShareConfirmation\";\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n// import TableRow from \"@material-ui/core/TableRow\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport PlaylistAddOutlinedIcon from \"@material-ui/icons/PlaylistAddOutlined\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: '12ch',\r\n            '&:focus': {\r\n                width: '20ch',\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = ({selected,numSelected,search,email,refresh}) => {\r\n    // const [value, setValue] = React.useState()\r\n    const classes = useToolbarStyles();\r\n    function triggerSearch (tmpValue) {\r\n        // setValue(tmpValue)\r\n        search(tmpValue)\r\n    };\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    All Tasks\r\n                </Typography>\r\n            )}\r\n            <IconButton variant=\"outlined\" color=\"primary\" onClick={refresh}>\r\n                <RefreshIcon />\r\n            </IconButton>\r\n            <FormAddTask email={email} refresh={refresh}/>\r\n            <FormDialog task={selected} numSelected={numSelected} refresh={refresh}/>\r\n            <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <InputBase\r\n                    placeholder=\"Search…\"\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    onChange={event=>{triggerSearch(event.target.value)}}\r\n                />\r\n            </div>\r\n            {numSelected > 0 ? (\r\n                <Box display=\"flex\" >\r\n                    <DeleteConfirmation task={selected} refresh={refresh}/>\r\n                    <ShareConfirmation task={selected}/>\r\n                </Box>\r\n            ) : (<div></div>)}\r\n        </Toolbar>\r\n    );\r\n};\r\nexport default EnhancedTableToolbar;\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\ShareConfirmation.js",["129"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport axios from \"axios\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\nexport default function ShareConfirmation({task}) {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [email, setEmail] = React.useState(\"\");\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleCloseShare = () => {\r\n        task.map(task => {\r\n            axios.post(`http://localhost:5500/api/tasks/share-task`, {\r\n                _id:task,\r\n                targetUserEmail: email,\r\n            })\r\n        })\r\n        setOpen(false);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title=\"Delete\">\r\n                <IconButton aria-label=\"delete\" onClick={handleClickOpen}>\r\n                    <ShareIcon color={\"primary\"} />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Dialog\r\n                fullWidth={true}\r\n                maxWidth={'sm'}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle  id=\"alert-dialog-title\">{\"Share Task\"} </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Share with:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        placeholder=\"placeholder@gmail.com\"\r\n                        margin=\"dense\"\r\n                        id=\"taskName\"\r\n                        label=\"Email\"\r\n                        type=\"text\"\r\n                        onChange={event => { setEmail(event.target.value )}}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Disagree\r\n                    </Button>\r\n                    <Button onClick={handleCloseShare} color=\"primary\" autoFocus>\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\DeleteConfirmation.js",["130","131","132","133"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport default function DeleteConfirmation({task, refresh}) {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    function handleCloseDelete (){\r\n        task.map(task => {\r\n            axios.delete(`http://localhost:5500/api/tasks/${task}`).then((response => {\r\n                if (response.data.deletedCount!=0) {\r\n                    console.log(\"Task deleted!!\");\r\n                    refresh();\r\n                } else {\r\n                    console.log('Failed to delete task');\r\n                }\r\n            }))\r\n        })\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title=\"Delete\">\r\n                <IconButton aria-label=\"delete\" onClick={handleClickOpen}>\r\n\r\n                    <DeleteIcon color={\"primary\"} />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Dialog\r\n                fullWidth={true}\r\n                maxWidth={'sm'}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\" Are you sure you want to delete these tasks ?\"}</DialogTitle>\r\n                <DialogContent>\r\n                    {/*<DialogContentText id=\"alert-dialog-description\">*/}\r\n                    {/*    Are you sure you want to delete these tasks?*/}\r\n                    {/*</DialogContentText>*/}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Disagree\r\n                    </Button>\r\n                    <Button onClick={handleCloseDelete} color=\"primary\" autoFocus>\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormAddTask.js",[],"C:\\Users\\dudit\\Desktop\\prog\\nodejs\\DCS-TaskMe\\TaskMeClient\\task-me-client\\src\\components\\dashboard\\TableOfTasks\\FormDialog.js",["134"],"import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport axios from 'axios';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(({\r\n\r\n    dialogForm: {\r\n        display: \"flex\" , \r\n        flexDirection: \"column\" ,\r\n    }\r\n}));\r\n\r\nexport default function FormDialog({ task, numSelected,refresh }) {\r\n    const [currentTask, setCurrentTask] = useState({});\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useStyles();\r\n\r\n    const handleClickOpen = () => {\r\n        if (numSelected>1){\r\n            alert(\"Can't edit more than 1 task.\")\r\n\r\n        }\r\n        else if(numSelected==0){\r\n            alert(\"Choose a task to edit.\")\r\n        }\r\n        else {\r\n            loadTask(task)\r\n            setOpen(true);\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        console.log(currentTask);\r\n        console.log(task);\r\n        setOpen(false);\r\n        refresh();\r\n    };\r\n    const handleUpdate = () => {\r\n        console.log(currentTask);\r\n        console.log(\"taks\",task);\r\n        console.log(\"taskName\",currentTask.taskName);\r\n        console.log(\"duration\",currentTask.durationMin);\r\n        console.log(\"startTime\",currentTask.startTime);\r\n        console.log(\"description\",currentTask.description);\r\n        console.log(\"status\",currentTask.status);\r\n        console.log(\"category\",currentTask.category);\r\n        axios.put(`http://localhost:5500/api/tasks`, {\r\n            _id: task,\r\n            taskName: currentTask.taskName,\r\n            durationMin: currentTask.durationMin,\r\n            startTime: currentTask.startTime,\r\n            description: currentTask.description,\r\n            status: currentTask.status,\r\n            category: currentTask.category\r\n        }).then((response => {\r\n            if (response.data.message === 'succesful') {\r\n                console.log('update succesful');\r\n            } else {\r\n                console.log('update failed');\r\n            }\r\n            handleClose();\r\n        }))\r\n\r\n    };\r\n\r\n    const loadTask = (task) => {\r\n        axios.get(`http://localhost:5500/api/tasks/view/${task}`).then((response => {\r\n            if (response.data) {\r\n                setCurrentTask(response.data)\r\n                console.log(\"Task loaded!!\",response.data);\r\n            } else {\r\n                console.log('failed to load task');\r\n            }\r\n        }))\r\n\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <IconButton variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <EditIcon />\r\n            </IconButton>\r\n            <Dialog fullWidth={\"fullWidth\"} maxWidth={\"sm\"} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Update Task</DialogTitle>\r\n                <DialogContent className={classes.dialogForm} >\r\n                    <DialogContentText>\r\n                        Please fill all fields\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"taskName\"\r\n                        label=\"Task Name\"\r\n                        type=\"text\"\r\n                        value={currentTask.taskName}\r\n                        onChange={event => { setCurrentTask({...currentTask, taskName:event.target.value })}}\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"duration\"\r\n                        label=\"Duration\"\r\n                        type=\"number\"\r\n                        value={currentTask.durationMin}\r\n                        onChange={event => { setCurrentTask({...currentTask, durationMin:event.target.value })}}\r\n\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"startTime\"\r\n                        label=\"Start date and time\"\r\n                        type=\"datetime-local\"\r\n                        defaultValue=\"2021-02-23T17:00\"\r\n                        value={currentTask.startTime}\r\n                        onChange={event => { setCurrentTask({...currentTask, startTime:event.target.value })}}\r\n\r\n                    />\r\n                    <TextField\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"description\"\r\n                        label=\"Description\"\r\n                        type=\"text\"\r\n                        value={currentTask.description}\r\n                        onChange={event => { setCurrentTask({...currentTask, description:event.target.value })}}\r\n\r\n                    />\r\n                    <InputLabel shrink id=\"statusSelectLabel\">\r\n                        Status\r\n                    </InputLabel>\r\n                    <Select\r\n                        labelId=\"statusSelectLabel\"\r\n                        id=\"statusSelect\"\r\n                        value={currentTask.status}\r\n                        onChange={event => { setCurrentTask({...currentTask, status:event.target.value })}}\r\n                    >\r\n                        <MenuItem value={'In progress'}>In progress</MenuItem>\r\n                        <MenuItem value={'New'}>New</MenuItem>\r\n                        <MenuItem value={'Done'}>Done</MenuItem>\r\n                    </Select>\r\n                    <InputLabel shrink id=\"categorySelectLabel\">\r\n                        Category\r\n                    </InputLabel >\r\n                    <Select\r\n                        labelId=\"categorySelectLabel\"\r\n                        id=\"categorySelect\"\r\n                        value={currentTask.category}\r\n                        onChange={event => { setCurrentTask({...currentTask, category:event.target.value })}}\r\n                    >\r\n                        <MenuItem value={'Education'}>Education</MenuItem>\r\n                        <MenuItem value={'Training'}>Training</MenuItem>\r\n                        <MenuItem value={'Meeting'}>Meeting</MenuItem>\r\n                        <MenuItem value={'Home'}>Home</MenuItem>\r\n                        <MenuItem value={'General'}>General</MenuItem>\r\n                    </Select>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleUpdate} color=\"primary\">\r\n                        Update\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}",{"ruleId":"135","severity":1,"message":"136","line":7,"column":8,"nodeType":"137","messageId":"138","endLine":7,"endColumn":16},{"ruleId":"135","severity":1,"message":"139","line":26,"column":8,"nodeType":"137","messageId":"138","endLine":26,"endColumn":19},{"ruleId":"135","severity":1,"message":"140","line":27,"column":8,"nodeType":"137","messageId":"138","endLine":27,"endColumn":21},{"ruleId":"135","severity":1,"message":"141","line":28,"column":8,"nodeType":"137","messageId":"138","endLine":28,"endColumn":21},{"ruleId":"135","severity":1,"message":"142","line":29,"column":8,"nodeType":"137","messageId":"138","endLine":29,"endColumn":14},{"ruleId":"135","severity":1,"message":"143","line":30,"column":8,"nodeType":"137","messageId":"138","endLine":30,"endColumn":14},{"ruleId":"144","severity":1,"message":"145","line":153,"column":8,"nodeType":"146","endLine":153,"endColumn":10,"suggestions":"147"},{"ruleId":"135","severity":1,"message":"148","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":21},{"ruleId":"135","severity":1,"message":"149","line":9,"column":8,"nodeType":"137","messageId":"138","endLine":9,"endColumn":22},{"ruleId":"135","severity":1,"message":"150","line":1,"column":16,"nodeType":"137","messageId":"138","endLine":1,"endColumn":24},{"ruleId":"135","severity":1,"message":"151","line":6,"column":8,"nodeType":"137","messageId":"138","endLine":6,"endColumn":25},{"ruleId":"135","severity":1,"message":"152","line":8,"column":8,"nodeType":"137","messageId":"138","endLine":8,"endColumn":18},{"ruleId":"135","severity":1,"message":"153","line":9,"column":8,"nodeType":"137","messageId":"138","endLine":9,"endColumn":15},{"ruleId":"135","severity":1,"message":"154","line":11,"column":9,"nodeType":"137","messageId":"138","endLine":11,"endColumn":12},{"ruleId":"155","severity":1,"message":"156","line":24,"column":30,"nodeType":"157","messageId":"158","endLine":24,"endColumn":32},{"ruleId":"144","severity":1,"message":"159","line":32,"column":6,"nodeType":"146","endLine":32,"endColumn":8,"suggestions":"160"},{"ruleId":"144","severity":1,"message":"161","line":48,"column":8,"nodeType":"146","endLine":48,"endColumn":10,"suggestions":"162"},{"ruleId":"155","severity":1,"message":"156","line":26,"column":36,"nodeType":"157","messageId":"158","endLine":26,"endColumn":38},{"ruleId":"144","severity":1,"message":"159","line":34,"column":8,"nodeType":"146","endLine":34,"endColumn":10,"suggestions":"163"},{"ruleId":"155","severity":1,"message":"156","line":26,"column":36,"nodeType":"157","messageId":"158","endLine":26,"endColumn":38},{"ruleId":"144","severity":1,"message":"159","line":34,"column":8,"nodeType":"146","endLine":34,"endColumn":10,"suggestions":"164"},{"ruleId":"155","severity":1,"message":"156","line":28,"column":42,"nodeType":"157","messageId":"158","endLine":28,"endColumn":44},{"ruleId":"155","severity":1,"message":"156","line":32,"column":35,"nodeType":"157","messageId":"158","endLine":32,"endColumn":37},{"ruleId":"155","severity":1,"message":"156","line":44,"column":32,"nodeType":"157","messageId":"158","endLine":44,"endColumn":34},{"ruleId":"144","severity":1,"message":"165","line":56,"column":8,"nodeType":"146","endLine":56,"endColumn":10,"suggestions":"166"},{"ruleId":"144","severity":1,"message":"167","line":198,"column":11,"nodeType":"146","endLine":198,"endColumn":26,"suggestions":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"135","severity":1,"message":"173","line":16,"column":8,"nodeType":"137","messageId":"138","endLine":16,"endColumn":31},{"ruleId":"155","severity":1,"message":"156","line":25,"column":23,"nodeType":"157","messageId":"158","endLine":25,"endColumn":25},{"ruleId":"135","severity":1,"message":"151","line":6,"column":8,"nodeType":"137","messageId":"138","endLine":6,"endColumn":25},{"ruleId":"135","severity":1,"message":"154","line":11,"column":9,"nodeType":"137","messageId":"138","endLine":11,"endColumn":12},{"ruleId":"155","severity":1,"message":"156","line":29,"column":23,"nodeType":"157","messageId":"158","endLine":29,"endColumn":25},{"ruleId":"174","severity":1,"message":"175","line":31,"column":47,"nodeType":"176","messageId":"177","endLine":31,"endColumn":49},{"ruleId":"174","severity":1,"message":"178","line":35,"column":28,"nodeType":"176","messageId":"177","endLine":35,"endColumn":30},"no-unused-vars","'MailIcon' is defined but never used.","Identifier","unusedVar","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getSharedTasks', 'history', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["179"],"'ListSubheader' is defined but never used.","'AssignmentIcon' is defined but never used.","'useState' is defined but never used.","'DialogContentText' is defined but never used.","'DeleteIcon' is defined but never used.","'Tooltip' is defined but never used.","'Box' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.",["180"],"React Hook useEffect has a missing dependency: 'tasksByCategory'. Either include it or remove the dependency array.",["181"],["182"],["183"],"React Hook useEffect has missing dependencies: 'data', 'getAllTasks', and 'tasks'. Either include them or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["184"],"React Hook useEffect has missing dependencies: 'getAllTasks' and 'tasks.length'. Either include them or remove the dependency array.",["185"],"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"'PlaylistAddOutlinedIcon' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"190","fix":"194"},{"desc":"190","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getSharedTasks, history, user]",{"range":"200","text":"201"},"Update the dependencies array to be: [getStats]",{"range":"202","text":"203"},"Update the dependencies array to be: [tasksByCategory]",{"range":"204","text":"205"},{"range":"206","text":"203"},{"range":"207","text":"203"},"Update the dependencies array to be: [data, getAllTasks, tasks]",{"range":"208","text":"209"},"Update the dependencies array to be: [getAllTasks, refreshSwitch, tasks.length]",{"range":"210","text":"211"},[5066,5068],"[getSharedTasks, history, user]",[731,733],"[getStats]",[1545,1547],"[tasksByCategory]",[887,889],[890,892],[1741,1743],"[data, getAllTasks, tasks]",[7000,7015],"[getAllTasks, refreshSwitch, tasks.length]"]